{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Android Programming","text":"<p>Auteur : Denis Rinfret</p>"},{"location":"#ressources","title":"Ressources","text":""},{"location":"#software","title":"Software","text":"<ol> <li>IntelliJ</li> <li>Android Studio<ul> <li>Recommendation : install Android Studio with Jetbrains Toolbox </li> </ul> </li> </ol>"},{"location":"#online-courses","title":"Online Courses","text":"<ol> <li>Kotlin for Java developers</li> <li>Android basics with Compose</li> </ol>"},{"location":"#references","title":"R\u00e9f\u00e9rences","text":"<ol> <li>Kotlin tour</li> <li>Develop for Android</li> <li>Material Theme Builder</li> <li>Material Icons</li> </ol>"},{"location":"#associated-projects","title":"Associated Projects","text":"<ul> <li>Available soon</li> </ul>"},{"location":"1.%20Kotlin/01-kotlin/","title":"The Kotlin Programming Language","text":"<p>Kotlin is a modern statically typed programming language used by more than 60% of professional Android developers, which helps improve productivity, developer satisfaction, and code safety. https://developer.android.com/kotlin?hl=fr</p> <p>Since Google I/O 2019, Google has declared Android mobile development as Kotlin-first. This means that Google recommends Android developers use Kotlin as their first choice programming language for developing new Android applications. Kotlin offers many advantages for Android development, including null safety, code clarity and conciseness, and complete interoperability with Java, which was previously the recommended language for Android development.</p> <p>Android\u2019s commitment to Kotlin</p> <p>Kotlin Documentation</p> <p>Kotlin is not only used for developing Android applications, but also for server-side development, cross-platform applications, and data analysis. Details</p>"},{"location":"1.%20Kotlin/02-kotlin-android/","title":"Kotlin for Android","text":"<p>Source</p> <p>Android mobile development has been Kotlin-first since Google I/O in 2019.</p> <p>More than 50% of professional Android developers use Kotlin as their primary language, while only 30% use Java as their main language. 70% of developers whose primary language is Kotlin say that Kotlin makes them more productive.</p> <p>By using Kotlin for Android development, you can benefit from:</p> <ul> <li>Less code combined with greater readability. Spend less time writing your code and trying to understand others\u2019   code.</li> <li>Fewer common errors. Applications built with Kotlin are 20% less likely to crash based   on Google\u2019s internal data.</li> <li>Kotlin support in Jetpack libraries. Jetpack Compose is Android\u2019s   recommended modern toolkit for building native UI in   Kotlin. KTX extensions add Kotlin language features like coroutines,   extension functions, lambdas, and named parameters to existing Android libraries.</li> <li>Support for multiplatform development. Kotlin Multiplatform enables development not only for Android but also   for iOS, backend, and web   applications. Some Jetpack libraries are already   multiplatform. Compose Multiplatform, JetBrains\u2019 declarative UI   framework based on Kotlin and Jetpack Compose, makes it possible to share user interfaces across platforms - iOS,   Android, desktop, and web.</li> <li>Mature language and environment. Since its creation in 2011, Kotlin has continuously evolved, not only as a   language but as an entire ecosystem with robust tooling. Today, it is seamlessly integrated   into Android Studio and is actively used by many companies to develop Android   applications.</li> <li>Interoperability with Java. You can use Kotlin in combination with the Java programming language in your   applications without having to migrate all your code to Kotlin.</li> <li>Easy to learn. Kotlin is very easy to learn, especially for Java developers.</li> <li>Large community. Kotlin enjoys strong support and many contributions from the worldwide community. More than 95%   of the top thousand Android applications use Kotlin.</li> </ul> <p>Many startups and Fortune 500 companies have already developed Android applications using Kotlin, see the list on Google\u2019s Android Developers website.</p>"},{"location":"1.%20Kotlin/03-functions/","title":"Functions","text":""},{"location":"1.%20Kotlin/03-functions/#functions-as-first-class-objects","title":"Functions as First-Class Objects","text":"<p>In modern programming languages, functions are treated as first-class citizens, meaning they can be used like any other value or object[1][14]. This allows functions to be:</p> <ul> <li>Assigned to variables</li> <li>Passed as arguments to other functions</li> <li>Returned from other functions</li> <li>Stored in data structures</li> </ul>"},{"location":"1.%20Kotlin/03-functions/#function-types-and-declarations","title":"Function Types and Declarations","text":"<p>To work with functions as values, we need to specify their type. A function type describes:</p> <ul> <li>The parameter types the function accepts</li> <li>The return type of the function</li> </ul> <p>For example, in TypeScript we can declare function types like this[3]:</p> <pre><code>let add: (a: number, b: number) =&gt; number;\n</code></pre> <p>In Kotlin, function types use a similar syntax[7]:</p> <pre><code>val multiply: (Int, Int) -&gt; Int\n</code></pre>"},{"location":"1.%20Kotlin/03-functions/#passing-and-returning-functions","title":"Passing and Returning Functions","text":"<p>Functions can be passed as arguments to other functions (called higher-order functions). Here\u2019s an example[4]:</p> <pre><code>fun callMe(greeting: () -&gt; Unit)\n{\n    greeting()\n}\n\nfun sayHello()\n{\n    println(\"Hello!\")\n}\n\ncallMe(::sayHello) // Passes sayHello function as argument\n</code></pre> <p>Functions can also be returned from other functions[5]:</p> <pre><code>fun makeCounter(start: Int): () -&gt; Int {\n    var count = start\n    return fun(): Int {\n        count++\n        return count\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-functions/#lambda-functions","title":"Lambda Functions","text":"<p>Lambda functions are anonymous functions that can be created without using the formal function declaration syntax[6]. They are especially useful for short, one-off functions.</p> <p>Basic lambda syntax in Kotlin[7]:</p> <pre><code>val sum = { x: Int, y: Int -&gt; x + y }\n</code></pre> <p>Lambda functions can be assigned to variables[61]:</p> <pre><code>val square: (Int) -&gt; Int = { x -&gt; x * x }\n</code></pre> <p>Multiple parameters[62]:</p> <pre><code>val fullName: (String, String) -&gt; String = { firstName, lastName -&gt;\n    \"$firstName $lastName\"\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-functions/#common-lambda-use-cases","title":"Common Lambda Use Cases","text":"<p>As Function Arguments[7]:</p> <pre><code>val numbers = listOf(1, 2, 3, 4)\nval doubled = numbers.map { it * 2 }\n</code></pre> <p>Returning Lambdas[7]:</p> <pre><code>fun makeOperation(op: String): (Int, Int) -&gt; Int {\n    return when (op) {\n        \"add\" -&gt; { a, b -&gt; a + b }\n        \"multiply\" -&gt; { a, b -&gt; a * b }\n        else -&gt; { a, b -&gt; 0 }\n    }\n}\n</code></pre> <p>Trailing Lambda Syntax[12]: If a function\u2019s last parameter is a lambda, you can place it outside the parentheses:</p> <pre><code>fun repeat(times: Int, action: () -&gt; Unit) {\n    for (i in 1..times) action()\n}\n\n// Called with trailing lambda\nrepeat(3) {\n    println(\"Hello\")\n}\n</code></pre> Citations <ul> <li>[1] https://blog.bitsrc.io/functional-programming-part-1-first-class-functions-791103984dfb?gi=1006a4787aa1</li> <li>[2] https://en.wikipedia.org/wiki/Function_object</li> <li>[3] https://www.typescripttutorial.net/typescript-tutorial/typescript-function-types/</li> <li>[4] https://education.launchcode.org/intro-to-professional-web-dev/chapters/more-on-functions/passing-functions.html</li> <li>[5] https://stackoverflow.com/questions/7629891/functions-that-return-a-function-what-is-the-difference-between-return-func</li> <li>[6] https://www.freecodecamp.org/news/python-lambda-function-explained/</li> <li>[7] https://www.dhiwise.com/post/kotlin-lambda-expressions-everything-you-need-to-know</li> <li>[8] https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function</li> <li>[9] https://www.programiz.com/kotlin-programming/lambdas</li> <li>[10] https://www.baeldung.com/kotlin/lambda-expressions</li> <li>[11] https://developer.android.com/codelabs/basic-android-kotlin-compose-function-types-and-lambda</li> <li>[12] https://kotlinlang.org/docs/lambdas.html</li> <li>[13] https://fr.wikipedia.org/wiki/Objet_de_premi%C3%A8re_classe</li> <li>[14] https://en.wikipedia.org/wiki/First-class_function</li> <li>[15] https://www.reddit.com/r/learnpython/comments/1aggl8q/why_should_i_use_objects_instead_of_variables_and/</li> <li>[16] https://www.studysmarter.co.uk/explanations/computer-science/functional-programming/first-class-functions/</li> <li>[17] https://stackoverflow.com/questions/245192/what-are-first-class-objects</li> <li>[18] https://developer.ibm.com/tutorials/oo-v-functional-programming/</li> <li>[19] https://www.reddit.com/r/learnprogramming/comments/cudods/first_class_functions_definition_meaning/</li> <li>[20] https://www.pluralsight.com/resources/blog/ai-and-data/javascript-functions-as-first-class-objects</li> <li>[21] https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP</li> <li>[22] https://www.studyplan.dev/pro-cpp/first-class-functions</li> <li>[23] https://www.cs.fsu.edu/~myers/c++/notes/classes.html</li> <li>[24] https://mostly-adequate.gitbook.io/mostly-adequate-guide/ch02</li> <li>[25] https://www.php.net/manual/en/language.types.declarations.php</li> <li>[26] https://www.typescriptlang.org/docs/handbook/2/functions.html</li> <li>[27] https://en.cppreference.com/w/cpp/language/function</li> <li>[28] https://dmitripavlutin.com/typescript-function-type/</li> <li>[29] https://www.codecademy.com/forum_questions/549f635fd3292f1bec0111af</li> <li>[30] https://go101.org/article/function-declarations-and-calls.html</li> <li>[31] https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/function-statement</li> <li>[32] https://stackoverflow.com/questions/57450544/declaring-functions-as-variables-in-c</li> <li>[33] https://www.reddit.com/r/ProgrammingLanguages/comments/u9mm3x/lets_talk_function_declarations/</li> <li>[34] https://softwareengineering.stackexchange.com/questions/300029/should-i-declare-variables-at-the-top-of-the-function-for-reasons-other-than-the</li> <li>[35] https://forum.arduino.cc/t/how-do-you-initiate-functions-in-the-variable-declaration-area/500552</li> <li>[36] https://codeofcode.org/lessons/function-arguments-and-return-values/</li> <li>[37] https://stackoverflow.com/questions/13286233/pass-a-javascript-function-as-parameter</li> <li>[38] https://support.freedomscientific.com/Content/Documents/Other/ScriptManual/12-4_FunctionsThatReturnValues.htm</li> <li>[39] https://www.tutorjoes.in/c_programming_tutorial/return_with_arg_function_in_c</li> <li>[40] https://www.w3schools.com/python/gloss_python_function_arguments.asp</li> <li>[41] https://www.reddit.com/r/learnjavascript/comments/ttsfa8/what_does_it_mean_to_return_function_inside/</li> <li>[42] https://runestone.academy/ns/books/published/thinkcspy/Functions/Functionsthatreturnvalues.html</li> <li>[43] https://www.ibm.com/docs/en/zos/2.4.0?topic=performance-passing-function-arguments</li> <li>[44] https://www.ibm.com/docs/en/i/7.4?topic=statement-examples-return-statements</li> <li>[45] https://stackoverflow.com/questions/42461229/when-to-return-value-from-function-and-when-to-use-out-parameter</li> <li>[46] https://softwareengineering.stackexchange.com/questions/253868/passing-functions-into-other-functions-as-parameters-bad-practice</li> <li>[47] https://www.cs.fsu.edu/~cop3014p/lectures/ch7/index.html</li> <li>[48] https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html</li> <li>[49] https://www.reddit.com/r/learnprogramming/comments/123bgpo/when_should_i_use_lambda_functions/</li> <li>[50] https://www.datacamp.com/tutorial/python-lambda-functions</li> <li>[51] https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170&amp;viewFallbackFrom=vs-2019</li> <li>[52] https://docs.aws.amazon.com/lambda/latest/dg/welcome.html</li> <li>[53] https://en.wikipedia.org/wiki/Anonymous_function</li> <li>[54] https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html</li> <li>[55] https://stackoverflow.com/questions/47110879/kotlin-when-and-how-should-one-use-lambda-expressions</li> <li>[56] https://stackoverflow.com/questions/77859479/lambda-value-assignment-with-and-without-braces-into-composable-function</li> <li>[57] https://kotlinlang.org/docs/functions.html</li> <li>[58] https://www.linen.dev/bot</li> <li>[59] https://www.reddit.com/r/Kotlin/comments/z2al5d/kotlin_theory_behind_jetpack_compose_what_are/</li> <li>[60] https://www.reddit.com/r/androiddev/comments/vp1td5/best_way_to_pass_lambdas_down_composables_in/</li> <li>[61] https://blog.stackademic.com/functions-lambdas-in-kotlin-android-bringing-your-code-to-life-with-everyday-magic-c73143e32ef3</li> <li>[62] https://www.javatpoint.com/kotlin-lambdas</li> <li>[63] https://dev.to/nozibul_islam_113b1d5334f/functions-as-first-class-citizens-in-javascript-4fji</li> <li>[64] https://dillionmegida.com/p/functions-are-also-objects/</li> <li>[65] https://en.wikipedia.org/wiki/First-class_data_type</li> <li>[66] https://wiingy.com/learn/python/first-class-functions-in-python/</li> <li>[67] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions</li> <li>[68] https://www.typescriptlang.org/docs/handbook/variable-declarations.html</li> <li>[69] https://www.ibm.com/docs/en/i/7.4?topic=definitions-examples-function-declarations</li> <li>[70] https://discourse.julialang.org/t/function-type-declaration/26203</li> <li>[71] https://www.w3schools.com/c/c_functions_decl.php</li> <li>[72] https://www.typescriptlang.org/docs/handbook/functions.html</li> <li>[73] https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions/</li> <li>[74] https://www.dhiwise.com/post/in-depth-look-at-typescript-function-types-best-practices</li> <li>[75] https://treyhunner.com/2020/01/passing-functions-as-arguments/</li> <li>[76] https://www.w3schools.com/cpp/cpp_function_return.asp</li> <li>[77] https://www.reddit.com/r/C_Programming/comments/1b6klq5/when_to_return_values_in_the_arguments_of_a/</li> <li>[78] https://www.reddit.com/r/learnjavascript/comments/m8vlsb/can_someone_explain_how_to_pass_a_function_as_an/</li> <li>[79] https://www.labs.cs.uregina.ca/110/OER2022/labs/lab9/valuereturning.php</li> <li>[80] https://www.w3schools.com/python/python_lambda.asp</li> <li>[81] https://discuss.python.org/t/what-is-the-purpose-of-lambda-expressions/12415</li> <li>[82] https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions</li> <li>[83] https://realpython.com/python-lambda/</li> <li>[84] https://www.dataquest.io/blog/tutorial-lambda-functions-in-python/</li> <li>[85] https://www.youtube.com/watch?v=HQNiSfb795A</li> <li>[86] https://stackoverflow.com/questions/16501/what-is-a-lambda-function</li> <li>[87] https://developer.android.com/develop/ui/compose/kotlin</li> <li>[88] https://www.youtube.com/watch?v=unCjOegBSMI</li> </ul>"},{"location":"1.%20Kotlin/03-functions/#collection-operations-with-lambda-functions","title":"Collection Operations with Lambda Functions","text":"<p>Map Transformations</p> <p>The <code>map</code> function transforms each element in a collection using a lambda expression:</p> <pre><code>val numbers = listOf(1, 2, 3, 4, 5)\nval squared = numbers.map { it * it }\nprintln(squared) // [1, 4, 9, 16, 25]\n\n// With custom objects\ndata class Person(val name: String, val age: Int)\n\nval people = listOf(Person(\"Alice\", 25), Person(\"Bob\", 30))\nval names = people.map { it.name }\nprintln(names) // [Alice, Bob]\n</code></pre> <p>Filter Operations</p> <p>Filter creates subsets of collections based on predicates:</p> <pre><code>val numbers = listOf(1, 2, 3, 4, 5, 6)\nval evenNumbers = numbers.filter { it % 2 == 0 }\nprintln(evenNumbers) // [2, 4, 6]\n\n// Filtering objects\nval adults = people.filter { it.age &gt;= 18 }\n</code></pre>"},{"location":"1.%20Kotlin/03-functions/#advanced-collection-operations","title":"Advanced Collection Operations","text":"<p>Chaining Operations</p> <pre><code>val result = numbers\n    .filter { it &gt; 2 }\n    .map { it * 2 }\n    .filter { it &lt; 10 }\n</code></pre> <p>Working with Maps</p> <pre><code>val ages = mapOf(\"Alice\" to 25, \"Bob\" to 30, \"Carol\" to 35)\nval adults = ages.filterValues { it &gt; 30 } //[4]\nval namesWithA = ages.filterKeys { it.startsWith(\"A\") } //[4]\n</code></pre> <p>Special Filters</p> <pre><code>// Remove null values\nval mixedList = listOf(1, null, 2, null, 3)\nval nonNullValues = mixedList.filterNotNull() //[3]\n\n// Filter with index\nval indexed = numbers.filterIndexed { index, value -&gt;\n    index % 2 == 0 &amp;&amp; value &gt; 2\n} //[3]\n</code></pre> <p>Testing Predicates</p> <pre><code>val numbers = listOf(1, 2, 3, 4, 5)\nval hasEven = numbers.any { it % 2 == 0 } //[3]\nval allPositive = numbers.all { it &gt; 0 } //[3]\nval noNegatives = numbers.none { it &lt; 0 } //[3]\n</code></pre> <p>Partitioning</p> <pre><code>val (evens, odds) = numbers.partition { it % 2 == 0 } //[3]\n</code></pre> <p>These operations are highly optimized in Kotlin - lambda functions passed to these collection operations are inlined, meaning there\u2019s no extra function call overhead at runtime[7].</p> Citations <ul> <li>[1] https://developer.android.com/codelabs/basic-android-kotlin-compose-higher-order-functions</li> <li>[2] https://www.baeldung.com/kotlin/filter-collection</li> <li>[3] https://kotlinlang.org/docs/collection-filtering.html</li> <li>[4] https://kotlinlang.org/docs/map-operations.html</li> <li>[5] https://kotlinlang.org/docs/collection-transformations.html</li> <li>[6] https://www.dhiwise.com/post/kotlin-list-filter-a-key-to-effective-data-filtering</li> <li>[7] https://www.dhiwise.com/post/kotlin-filter-simplifying-the-search-for-collection-elements</li> <li>[8] https://stackoverflow.com/questions/73635893/log-statements-and-collection-functions-map-filter</li> <li>[9] https://kotlinlang.org/docs/lambdas.html</li> <li>[10] https://appcircle.io/blog/transforming-kotlin-collections-functions-with-examples</li> <li>[11] https://stackoverflow.com/questions/68429908/how-to-use-a-predefined-lambda-in-kotlin</li> </ul>"},{"location":"1.%20Kotlin/03-functions/#example-with-jetpack-compose","title":"Example with Jetpack Compose","text":"<pre><code>import android.util.Log\n\n@Composable\nfun ActionButton(\n    text: String,\n    onButtonClick: () -&gt; Unit\n) {\n    Button(\n        onClick = onButtonClick\n    ) {\n        Text(text)\n    }\n}\n</code></pre> <p>And here\u2019s how to use it with proper logging:</p> <pre><code>ActionButton(\n    text = \"Click Me\",\n    onButtonClick = {\n        Log.d(\"ActionButton\", \"Button clicked!\")\n    }\n)\n</code></pre> <p>The Log class provides different logging levels:</p> <ul> <li><code>Log.d()</code> for debug messages</li> <li><code>Log.i()</code> for informational messages</li> <li><code>Log.e()</code> for error messages</li> <li><code>Log.w()</code> for warning messages</li> <li><code>Log.v()</code> for verbose messages</li> </ul> <p>These messages will appear in Android Studio\u2019s Logcat window, where you can:</p> <ul> <li>Filter by tag (\u201cActionButton\u201d in this example)</li> <li>Filter by log level</li> <li>Search through logs</li> <li>See the exact timestamp of each event</li> </ul>"},{"location":"2.%20Android/01-intro/","title":"1. Introduction to Mobile and Android Programming","text":"<p>Mobile programming represents an exciting and constantly evolving field in software development. It offers developers the opportunity to create applications that accompany users everywhere, transforming how we interact with technology in our daily lives.</p>"},{"location":"2.%20Android/01-intro/#mobile-programming-challenges","title":"Mobile Programming Challenges","text":"<p>Mobile application development presents unique challenges compared to traditional platforms:</p> <ol> <li> <p>Limited resources: Mobile devices typically have less processing power, memory, and battery life than desktop    computers.</p> </li> <li> <p>Device diversity: There is a wide variety of screen sizes, resolutions, and hardware capabilities to consider.</p> </li> <li> <p>Intermittent connectivity: Mobile applications must often function with unstable or nonexistent Internet    connections.</p> </li> <li> <p>Touch interactions: The user interface must be designed for touch interactions rather than mouse and keyboard.</p> </li> <li> <p>Application lifecycle: Mobile applications can be interrupted at any time by calls, notifications, or other    system events.</p> </li> </ol>"},{"location":"2.%20Android/01-intro/#android-vs-other-platforms","title":"Android vs Other Platforms","text":"<p>Android distinguishes itself in several aspects:</p> <ul> <li>Open source: Unlike iOS, Android is an open-source operating system, offering more flexibility to developers.</li> <li>Market share: Android dominates the global smartphone market with over 70% market share.</li> <li>Device diversity: Android runs on a wide variety of devices from different manufacturers, unlike iOS which is   limited to Apple devices.</li> <li>Publication process: Publishing applications on the Google Play Store is generally faster and less restrictive   than on Apple\u2019s App Store.</li> </ul>"},{"location":"2.%20Android/01-intro/#history-of-android-versions","title":"History of Android Versions","text":"<ul> <li>2008: Android 1.0 (API 1)</li> <li>2009: Android 2.0 (Eclair, API 5)</li> <li>2010: Android 2.2 (Froyo, API 8) and 2.3 (Gingerbread, API 9)</li> <li>2011: Android 3.0 (Honeycomb, API 11) and 4.0 (Ice Cream Sandwich, API 14)</li> <li>2012: Android 4.1 (Jelly Bean, API 16)</li> <li>2013: Android 4.4 (KitKat, API 19)</li> <li>2014: Android 5.0 (Lollipop, API 21)</li> <li>2015: Android 6.0 (Marshmallow, API 23)</li> <li>2016: Android 7.0 (Nougat, API 24)</li> <li>2017: Android 8.0 (Oreo, API 26)</li> <li>2018: Android 9 (Pie, API 28)</li> <li>2019: Android 10 (API 29)</li> <li>2020: Android 11 (API 30)</li> <li>2021: Android 12 (API 31)</li> <li>2022: Android 13 (API 33)</li> <li>2023: Android 14 (API 34)</li> </ul> <p>This list highlights the progression of Android versions and their corresponding APIs. It\u2019s important to note that each new API version typically brings new features, performance improvements, and changes in how developers interact with the Android system.</p> <p>API numbers are particularly important for developers as they determine:</p> <ol> <li>The features available to the application.</li> <li>The application\u2019s compatibility with different Android devices.</li> <li>The minimum and target requirements for publishing on the Google Play Store.</li> </ol> <p>When developing an Android application, developers must choose a minimum API version (which determines the oldest supported devices) and a target API version (typically the most recent to take advantage of the latest features and optimizations).</p> <p>This constant progression of API versions underscores the importance for Android developers to stay current with the latest platform developments and adapt their applications accordingly.</p>"},{"location":"2.%20Android/01-intro/#classic-vs-modern-android-applications","title":"Classic vs Modern Android Applications","text":""},{"location":"2.%20Android/01-intro/#classic-applications-java","title":"Classic Applications (Java)","text":"<ul> <li>Use of Java as the main language</li> <li>User interface defined in XML</li> <li>Use of Activities and Fragments for application structure</li> <li>More complex component lifecycle management</li> </ul>"},{"location":"2.%20Android/01-intro/#modern-applications-kotlin-with-jetpack-compose","title":"Modern Applications (Kotlin with Jetpack Compose)","text":"<ul> <li>Use of Kotlin, a more modern and concise language</li> <li>User interface defined declaratively with Jetpack Compose</li> <li>More flexible and modular application structure</li> <li>Simplified component lifecycle management</li> <li>Better performance and less boilerplate code</li> <li>Native support for asynchronous and reactive programming\u2026 The transition from Java to Kotlin and the adoption of   Jetpack Compose represent a major evolution in Android development, offering developers more powerful tools and a more   enjoyable development experience.</li> </ul> <p>In conclusion, Android mobile programming offers numerous opportunities and challenges. With the constant evolution of the platform and development tools, it is crucial for developers to stay up-to-date and adopt best practices to create performant and attractive applications.</p>"},{"location":"2.%20Android/01-intro/#android-mobile-application-development-steps","title":"Android Mobile Application Development Steps","text":"<p>Mobile application development is a complex process that involves several steps, from initial design to final deployment. Here\u2019s a detailed overview of the main steps to develop an Android mobile application, including testing and deployment phases:</p>"},{"location":"2.%20Android/01-intro/#1-design-and-planning","title":"1. Design and Planning","text":"<ul> <li>Define application objectives and features</li> <li>Conduct market research and competitive analysis</li> <li>Create user interface wireframes and mockups</li> <li>Develop a development plan and schedule</li> </ul>"},{"location":"2.%20Android/01-intro/#2-development-environment-setup","title":"2. Development Environment Setup","text":"<ul> <li>Install Android Studio</li> <li>Configure Android SDK and necessary tools</li> <li>Set up version control system (e.g., Git)</li> </ul>"},{"location":"2.%20Android/01-intro/#3-development","title":"3. Development","text":"<ul> <li>Code the user interface (UI) with Jetpack Compose</li> <li>Implement business logic in Kotlin</li> <li>Integrate necessary APIs (Google Maps, payment, etc.)</li> <li>Manage local data storage (SharedPreferences, Room)</li> <li>Implement network connectivity features</li> </ul>"},{"location":"2.%20Android/01-intro/#4-testing","title":"4. Testing","text":""},{"location":"2.%20Android/01-intro/#a-unit-tests","title":"a. Unit Tests","text":"<ul> <li>Write and execute unit tests for individual components</li> <li>Use JUnit and Mockito to test business logic</li> </ul>"},{"location":"2.%20Android/01-intro/#b-integration-tests","title":"b. Integration Tests","text":"<ul> <li>Test interaction between different application modules</li> <li>Use Espresso for automated UI testing</li> </ul>"},{"location":"2.%20Android/01-intro/#c-manual-tests","title":"c. Manual Tests","text":"<ul> <li>Perform functional tests on different devices and Android versions</li> <li>Test real-world usage scenarios</li> </ul>"},{"location":"2.%20Android/01-intro/#d-performance-tests","title":"d. Performance Tests","text":"<ul> <li>Analyze application performance (CPU usage, memory, battery)</li> <li>Use Android Profiler to identify bottlenecks</li> </ul>"},{"location":"2.%20Android/01-intro/#5-debugging-and-optimization","title":"5. Debugging and Optimization","text":"<ul> <li>Fix bugs identified during testing</li> <li>Optimize application performance</li> <li>Improve user experience based on feedback</li> </ul>"},{"location":"2.%20Android/01-intro/#6-deployment-preparation","title":"6. Deployment Preparation","text":"<ul> <li>Generate a signed APK or App bundle</li> <li>Prepare marketing resources (icons, screenshots, descriptions)</li> <li>Write privacy policy and terms of use</li> </ul>"},{"location":"2.%20Android/01-intro/#7-google-play-store-deployment","title":"7. Google Play Store Deployment","text":"<ul> <li>Create a Google Play developer account</li> <li>Configure the application listing on Google Play console</li> <li>Upload APK or App bundle</li> <li>Define distribution countries and prices (if applicable)</li> <li>Submit application for review</li> </ul>"},{"location":"2.%20Android/01-intro/#8-post-launch-monitoring-and-maintenance","title":"8. Post-launch Monitoring and Maintenance","text":"<ul> <li>Monitor installation and usage statistics</li> <li>Collect and analyze user feedback</li> <li>Respond to user comments and questions</li> <li>Plan and develop regular updates</li> </ul>"},{"location":"2.%20Android/01-intro/#9-updates-and-iterations","title":"9. Updates and Iterations","text":"<ul> <li>Fix bugs reported by users</li> <li>Add new features based on feedback</li> <li>Adapt application to new Android versions and devices</li> </ul>"},{"location":"2.%20Android/01-intro/#10-continuous-marketing-and-promotion","title":"10. Continuous Marketing and Promotion","text":"<ul> <li>Implement ASO (App Store Optimization) strategies</li> <li>Promote the application on social media and other channels</li> <li>Analyze performance metrics and adjust marketing strategy</li> </ul> <p>This process is iterative, and many steps can overlap or be repeated as the application develops and evolves. It is crucial to remain flexible and responsive to market changes, user feedback, and technological advances throughout the application\u2019s lifecycle.</p>"},{"location":"2.%20Android/02-intro-compose/","title":"2. Introduction to Jetpack Compose","text":"<p>Jetpack Compose is a modern toolkit for developing native user interfaces on Android. Launched by Google, it represents a major evolution in how developers create interfaces for Android applications.</p>"},{"location":"2.%20Android/02-intro-compose/#motivations-and-history","title":"Motivations and History","text":""},{"location":"2.%20Android/02-intro-compose/#motivations","title":"Motivations","text":"<ol> <li>UI Development Simplification: Reduce complexity and boilerplate code associated with creating user interfaces.</li> <li>Declarative Approach: Allow developers to describe what they want to display rather than how to build it.</li> <li>Improved Performance: Optimize rendering and user interface updates.</li> <li>Alignment with Modern Trends: Align with modern UI development approaches like React and SwiftUI.</li> </ol>"},{"location":"2.%20Android/02-intro-compose/#history","title":"History","text":"<ul> <li>2019: Initial announcement of Jetpack Compose at Google I/O.</li> <li>2020: Release of first alpha versions for developers.</li> <li>July 2021: Official launch of stable version 1.0.</li> <li>Since then, Compose continues to evolve with regular updates bringing new features and improvements.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#companies-and-organizations-using-kotlin-and-compose","title":"Companies and Organizations Using Kotlin and Compose","text":"<ol> <li> <p>Google: Uses Kotlin and Compose in many applications like Google Play, Google Home, and Google Drive.</p> <ul> <li>Reason: Improved developer productivity and alignment with Android recommendations.</li> </ul> </li> <li> <p>Netflix: Has adopted Kotlin for its Android application.</p> <ul> <li>Reason: Type safety, error reduction, and code expressiveness.</li> </ul> </li> <li> <p>Airbnb: Uses Kotlin in its mobile application.</p> <ul> <li>Reason: Interoperability with existing Java and improved code quality.</li> </ul> </li> <li> <p>Pinterest: Migrated to Kotlin for its Android development.</p> <ul> <li>Reason: Concise syntax and modern language features.</li> </ul> </li> <li> <p>Uber: Uses Kotlin in its mobile applications.</p> <ul> <li>Reason: Improved developer productivity and bug reduction.</li> </ul> </li> <li> <p>Trello: Has adopted Kotlin for its Android application.</p> <ul> <li>Reason: Language expressiveness and better programming practices.</li> </ul> </li> <li> <p>Evernote: Uses Kotlin in its Android application.</p> <ul> <li>Reason: Cleaner and more maintainable code.</li> </ul> </li> <li> <p>Basecamp: Migrated its application to Kotlin.</p> <ul> <li>Reason: Increased security and more pleasant syntax for developers.</li> </ul> </li> <li> <p>Corda: Blockchain platform developed entirely in Kotlin.</p> <ul> <li>Reason: Language robustness for critical systems.</li> </ul> </li> <li> <p>Coursera: Uses Kotlin for its mobile application.</p> <ul> <li>Reason: Improved code quality and development speed.</li> </ul> </li> </ol> <p>These companies have chosen Kotlin and, for some, Compose, mainly for:</p> <ul> <li>Increased developer productivity</li> <li>Reduction in errors and crashes</li> <li>Language modernity and expressiveness</li> <li>Compatibility with existing Java ecosystem</li> <li>Improved code maintainability</li> </ul> <p>The growing adoption of Compose, although more recent, is motivated by its ability to simplify and accelerate the development of modern and performant user interfaces on Android.</p>"},{"location":"2.%20Android/02-intro-compose/#basic-principles-of-a-compose-application","title":"Basic Principles of a Compose Application","text":""},{"location":"2.%20Android/02-intro-compose/#application-structure","title":"Application Structure","text":"<ol> <li>Composables: Functions annotated with <code>@Composable</code> that describe a part of the user interface.</li> <li>State: Data that can change over time and influences the UI (user interface).</li> <li>Recomposition: Process of updating the UI when state changes.</li> </ol>"},{"location":"2.%20Android/02-intro-compose/#typical-components","title":"Typical Components","text":"<ol> <li>Layout: <code>Column</code>, <code>Row</code>, <code>Box</code> for structuring the UI.</li> <li>UI Elements: <code>Text</code>, <code>Button</code>, <code>Image</code>, etc., for displaying content.</li> <li>Modifiers: For customizing composable appearance and behavior.</li> <li>State Hoisting: Technique for managing and sharing state between components.</li> <li>Navigation: Management of different screens and application flow.</li> <li>Themes: Consistent customization of application appearance.</li> </ol> <p>Jetpack Compose offers several significant advantages compared to traditional Android development methods based on XML and the view system. Here are the main advantages of Jetpack Compose:</p>"},{"location":"2.%20Android/02-intro-compose/#advantages-of-jetpack-compose","title":"Advantages of Jetpack Compose","text":""},{"location":"2.%20Android/02-intro-compose/#1-code-simplicity-and-conciseness","title":"1. Code Simplicity and Conciseness","text":"<ul> <li>Less boilerplate code: Compose significantly reduces the amount of code needed to create complex user interfaces.</li> <li>More readable code: The declarative nature of Compose makes code easier to read and understand.</li> <li>UI code unification: No more juggling between XML and Java/Kotlin, everything is in a single language (Kotlin).</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#2-faster-development","title":"2. Faster Development","text":"<ul> <li>Real-time preview: Developers can see UI changes instantly without having to recompile the entire application.</li> <li>Faster iterations: The combination of real-time preview and more concise code enables faster development   iterations.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#3-declarative-approach","title":"3. Declarative Approach","text":"<ul> <li>Final state description: Developers describe what the UI should be, rather than the steps to get there.</li> <li>Simplified state management: Compose facilitates application state management and its synchronization with the UI.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#4-flexibility-and-reusability","title":"4. Flexibility and Reusability","text":"<ul> <li>Highly reusable components: It\u2019s easy to create reusable UI components and share them between different parts of   the application.</li> <li>Easy customization: Components can be easily customized through modifiers and parameters.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#5-improved-performance","title":"5. Improved Performance","text":"<ul> <li>Automatic optimizations: Compose automatically optimizes recompositions to minimize unnecessary UI updates.</li> <li>Efficient rendering: Compose\u2019s rendering system is designed to be more efficient than the traditional view system.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#6-better-interoperability","title":"6. Better Interoperability","text":"<ul> <li>Integration with existing views: Compose can be gradually integrated into existing applications, allowing for   smooth migration.</li> <li>Support for existing Android libraries: Compose works well with existing Android libraries and components.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#7-simplified-testing","title":"7. Simplified Testing","text":"<ul> <li>Easier unit tests: Since composables are Kotlin functions, they are easier to unit test.</li> <li>Fewer UI tests needed: The declarative nature of Compose reduces the need for exhaustive UI testing.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#8-material-design-consistency","title":"8. Material Design Consistency","text":"<ul> <li>Native Material Design implementation: Compose provides ready-to-use Material Design components, making it easy to   create interfaces that comply with Google\u2019s guidelines.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#9-multiplatform-support","title":"9. Multiplatform Support","text":"<ul> <li>Potential for multiplatform development: Although primarily for Android, Compose has the potential to be used for   desktop and web application development (with Compose for Desktop and Compose for Web).</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#10-reduced-learning-curve","title":"10. Reduced Learning Curve","text":"<ul> <li>Unified concepts: Once basic concepts are mastered, it\u2019s easier to create complex interfaces.</li> <li>Quality documentation and resources: Google provides extensive documentation and codelabs to facilitate learning.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#11-better-animation-management","title":"11. Better Animation Management","text":"<ul> <li>Intuitive animation API: Compose offers simpler and more powerful animation APIs than traditional methods.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#12-adaptation-to-different-screen-sizes","title":"12. Adaptation to Different Screen Sizes","text":"<ul> <li>Facilitated responsive design: Compose simplifies the creation of interfaces that adapt to different screen sizes,   a crucial aspect for modern Android applications.</li> </ul> <p>In conclusion, Jetpack Compose represents a major evolution in Android development, offering a more modern, efficient, and enjoyable approach to creating user interfaces. Although there is an initial learning curve, the long-term benefits in terms of productivity, maintainability, and code quality are significant.</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/","title":"3. First Application with Jetpack Compose","text":"<p>Here\u2019s a simple example of a \u201cHello!\u201d application using Jetpack Compose. I will present the code, then explain each important element step by step.</p> <pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Box(modifier = Modifier.fillMaxSize()) {\n                Text(\n                    text = \"Hello!\",\n                    modifier = Modifier.align(Alignment.Center)\n                )\n            }\n        }\n    }\n}\n</code></pre> <p>Now, let\u2019s explain the important elements of this application step by step:</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#explanation-of-key-elements","title":"Explanation of Key Elements","text":""},{"location":"2.%20Android/03-premi%C3%A8re-app/#1-imports","title":"1. Imports","text":"<pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\n</code></pre> <ul> <li>These imports are necessary to use Jetpack Compose classes and functions.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#2-main-activity-definition","title":"2. Main Activity Definition","text":"<pre><code>class MainActivity : ComponentActivity() {\n    // ...\n}\n</code></pre> <ul> <li><code>MainActivity</code> inherits from <code>ComponentActivity</code>, which is the recommended base class for activities using Compose.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#3-oncreate-method","title":"3. onCreate Method","text":"<pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // ...\n}\n</code></pre> <ul> <li>This method is called when the activity is created.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#4-setcontent","title":"4. setContent","text":"<pre><code>setContent {\n    // Compose content\n}\n</code></pre> <ul> <li><code>setContent</code> is a Compose-specific function that defines the user interface content.</li> <li>Everything inside this function is Compose code.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#5-box-layout","title":"5. Box Layout","text":"<pre><code>Box(modifier = Modifier.fillMaxSize()) {\n    // Box content\n}\n</code></pre> <ul> <li><code>Box</code> is a layout component that allows stacking elements.</li> <li><code>Modifier.fillMaxSize()</code> makes the Box occupy all available screen space.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#6-text-composable","title":"6. Text Composable","text":"<pre><code>Text(\n    text = \"Hello!\",\n    modifier = Modifier.align(Alignment.Center)\n)\n</code></pre> <ul> <li><code>Text</code> is a Compose component for displaying text.</li> <li><code>text = \"Hello!\"</code> defines the text to display.</li> <li><code>Modifier.align(Alignment.Center)</code> centers the text in the Box.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#key-points-to-remember","title":"Key Points to Remember","text":"<ol> <li> <p>Composables: In Compose, the user interface is built from composable functions (like <code>Text</code>).</p> </li> <li> <p>Declarative: The code describes what should be displayed, not how to build it step by step.</p> </li> <li> <p>Modifiers: <code>Modifier</code>s are used to customize component appearance and behavior.</p> </li> <li> <p>Hierarchy: Components are organized hierarchically (here, <code>Text</code> is inside <code>Box</code>).</p> </li> <li> <p>No XML: Unlike traditional Android development, there are no XML files to define the layout.</p> </li> </ol> <p>This simple application displays \u201cHello!\u201d in the center of the screen. It\u2019s an ideal starting point to begin exploring Jetpack Compose, as it illustrates the basic concepts without too much complexity.</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#defining-composable-functions","title":"Defining Composable Functions","text":"<p>Here\u2019s the modified example with a composable function defined for the <code>Box</code>, and its call in <code>onCreate</code>. I will then explain the modifications.</p> <pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            HelloScreen()\n        }\n    }\n}\n\n@Composable\nfun HelloScreen() {\n    Box(modifier = Modifier.fillMaxSize()) {\n        Text(\n            text = \"Hello World!\",\n            modifier = Modifier.align(Alignment.Center)\n        )\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun HelloPreview() {\n    HelloScreen()\n}\n</code></pre> <p>Let\u2019s now explain the modifications and their implications:</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#explanation-of-changes","title":"Explanation of Changes","text":""},{"location":"2.%20Android/03-premi%C3%A8re-app/#1-new-helloscreen-composable-function","title":"1. New <code>HelloScreen</code> Composable Function","text":"<pre><code>@Composable\nfun HelloScreen() {\n    Box(modifier = Modifier.fillMaxSize()) {\n        Text(\n            text = \"Hello World!\",\n            modifier = Modifier.align(Alignment.Center)\n        )\n    }\n}\n</code></pre> <ul> <li>This new function is annotated with <code>@Composable</code>, indicating it\u2019s a Jetpack Compose composable function.</li> <li>It encapsulates the display logic that was previously directly in <code>setContent</code>.</li> <li>This approach improves code reusability and readability.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#2-modification-of-oncreate","title":"2. Modification of <code>onCreate</code>","text":"<pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContent {\n        HelloScreen()\n    }\n}\n</code></pre> <ul> <li>Instead of defining the content directly in <code>setContent</code>, we now call our <code>HelloScreen</code> composable function.</li> <li>This makes the <code>onCreate</code> code more concise and clear.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#3-adding-a-preview-function","title":"3. Adding a Preview Function","text":"<pre><code>@Preview(showBackground = true)\n@Composable\nfun HelloPreview() {\n    HelloScreen()\n}\n</code></pre> <ul> <li>This new function is annotated with <code>@Preview</code>, which allows previewing the component in Android Studio without   running the application.</li> <li><code>showBackground = true</code> adds a background to the preview for better visibility.</li> <li>It calls <code>HelloScreen()</code>, allowing you to see exactly what will be displayed in the application.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#implications-and-benefits-of-these-changes","title":"Implications and Benefits of These Changes","text":"<ol> <li> <p>Separation of Concerns: Display logic is now separated from activity logic, which is a good programming practice.</p> </li> <li> <p>Reusability: <code>HelloScreen</code> can be easily reused elsewhere in the application if needed.</p> </li> <li> <p>Testability: It\u2019s easier to test <code>HelloScreen</code> in isolation.</p> </li> <li> <p>Preview: Adding the preview function allows developers to quickly see interface changes without having to compile    and run the entire application.</p> </li> <li> <p>Modularity: This structure facilitates future addition of features or modifications to the user interface.</p> </li> <li> <p>Readability: The code is clearer and easier to understand, with each part having a well-defined role.</p> </li> <li> <p>Scalability: As the application grows, this structure makes it easy to add new components and screens.</p> </li> </ol> <p>This approach is typical of development with Jetpack Compose, where the user interface is built from reusable and previewable components. It\u2019s a solid foundation for developing more complex applications while maintaining clean and organized code.</p>"},{"location":"2.%20Android/03b-usb-wifi-debugging/","title":"3.1 USB and Wifi debugging","text":""},{"location":"2.%20Android/03b-usb-wifi-debugging/#enable-developer-mode","title":"Enable Developer Mode","text":"<p>Step 1: Access Build Number</p> <ul> <li>Open Settings on your Android device</li> <li>Navigate to \u201cAbout phone\u201d (location may vary by manufacturer)[1][2]</li> <li>Find \u201cBuild number\u201d (locations vary by device manufacturer):</li> <li>Google Pixel: Settings &gt; About phone &gt; Build number</li> <li>Samsung Galaxy: Settings &gt; About phone &gt; Software information &gt; Build number</li> <li>OnePlus: Settings &gt; About phone &gt; Build number[1]</li> </ul> <p>Step 2: Activate Developer Mode</p> <ul> <li>Tap \u201cBuild number\u201d seven times</li> <li>You\u2019ll see a countdown message as you tap</li> <li>Enter your device PIN/password if prompted</li> <li>You\u2019ll see \u201cYou are now a developer!\u201d message when successful[2]</li> </ul>"},{"location":"2.%20Android/03b-usb-wifi-debugging/#enable-usb-debugging","title":"Enable USB Debugging","text":"<p>Step 3: Configure Developer Options</p> <ul> <li>Return to Settings</li> <li>Find \u201cDeveloper options\u201d (usually under System or Additional Settings)</li> <li>Toggle Developer options ON</li> <li>Scroll down to find \u201cUSB debugging\u201d</li> <li>Enable the USB debugging toggle</li> <li>Accept the warning message when prompted[4][7]</li> </ul>"},{"location":"2.%20Android/03b-usb-wifi-debugging/#connect-to-android-studio","title":"Connect to Android Studio","text":"<p>Step 4: Physical Connection</p> <ul> <li>Connect your Android device to your computer using a USB cable</li> <li>On your device, when prompted:</li> <li>Check \u201cAlways allow from this computer\u201d</li> <li>Tap \u201cAllow\u201d to authorize USB debugging[7]</li> </ul> <p>Step 5: Device Settings</p> <ul> <li>Pull down the notification shade on your device</li> <li>Tap the \u201cCharging this device via USB\u201d notification</li> <li>Select \u201cFile Transfer\u201d or \u201cTransfer files\u201d mode[26]</li> </ul> <p>Step 6: Android Studio Recognition</p> <ul> <li>Open your project in Android Studio</li> <li>Your device should appear in the device dropdown menu</li> <li>Select your device to run and debug your application[10]</li> </ul>"},{"location":"2.%20Android/03b-usb-wifi-debugging/#troubleshooting","title":"Troubleshooting","text":"<p>If Android Studio doesn\u2019t recognize your device:</p> <ul> <li>Ensure USB debugging is enabled</li> <li>Try disconnecting and reconnecting the USB cable</li> <li>Check if proper USB drivers are installed on your computer</li> <li>Restart Android Studio[3]</li> </ul> Citations <ul> <li>[1] https://www.delasign.com/blog/how-to-enable-developer-mode-on-an-android-phone-or-tablet/</li> <li>[2] https://adapty.io/blog/how-to-turn-on-developer-mode-android/</li> <li>[3] https://itoolab.com/unlock-android/enable-usb-debugging-from-pc/</li> <li>[4] https://www.asus.com/support/faq/1046846/</li> <li>[5] https://developer.android.com/studio/debug/apk-debugger</li> <li>[6] https://www.youtube.com/watch?v=8lCYnAe-cc0</li> <li>[7] https://developer.android.com/codelabs/basic-android-kotlin-compose-connect-device</li> <li>[8] https://stackoverflow.com/questions/62019006/how-to-debug-an-android-app-using-android-studio</li> <li>[9] https://www.zipy.ai/guide/android-debugging</li> <li>[10] https://developer.android.com/codelabs/basic-android-kotlin-compose-intro-debugger</li> <li>[11] https://developer.android.com/studio/run/rundebugconfig.html</li> <li>[12] https://www.javatpoint.com/how-to-enable-or-disable-developer-options-on-android</li> <li>[13] https://www.digitaltrends.com/mobile/how-to-get-developer-options-on-android/</li> <li>[14] https://www.xda-developers.com/android-developer-options/</li> <li>[15] https://www.youtube.com/watch?v=EdID5Xo1fa8</li> <li>[16] https://www.geeksforgeeks.org/enable-or-disable-developer-mode-option/</li> <li>[17] https://docs.zebra.com/us/en/mobile-computers/handheld/ps2-series/ps20-product-reference-guide/ps20-product-reference-guide/application-deployment/android-development-tools/enabling-developer-options.html</li> <li>[18] https://www.youtube.com/watch?v=7K6AWPCAkiU</li> <li>[19] https://en-gb.support.motorola.com/app/answers/detail/a_id/159678/~/developer-options</li> <li>[20] https://developer.android.com/studio/debug/dev-options</li> <li>[21] https://www.youtube.com/watch?v=WF-zAgxArYk</li> <li>[22] https://docs.kony.com/konylibrary/visualizer/visualizer_user_guide/Content/AndroidUSBDebugging_Windows10.htm</li> <li>[23] https://developer.chrome.com/docs/devtools/remote-debugging</li> <li>[24] https://help.litecam.net/hc/en-us/articles/360002145074-How-Do-I-Install-Android-USB-Driver-And-Enable-USB-Debugging-Mode</li> <li>[25] https://www.reddit.com/r/AndroidQuestions/comments/156lij7/forcing_usb_debug_on_a_broken_phonecontrol_phone/</li> <li>[26] https://www.wideanglesoftware.com/support/droidtransfer/how-to-connect-your-android-phone-with-a-usb-cable.php</li> <li>[27] https://www.wideanglesoftware.com/droidtransfer/help/connect-android-phone-to-pc-with-usb.php</li> <li>[28] https://developer.android.com/tools/adb</li> <li>[29] https://developer.android.com/studio/run/device.html</li> <li>[30] https://docs.digital.ai/continuous-testing/docs/lt/live-testing-home/resources-for-developers/remote-application-debugging/android-studio-connect-remote-devices</li> <li>[31] https://documentation.xojo.com/topics/debugging/android/android_debugging_on_device.html</li> </ul>"},{"location":"2.%20Android/03b-usb-wifi-debugging/#wireless-debugging-setup","title":"Wireless Debugging Setup","text":"<p>Step 1: Enable and Configure</p> <ul> <li>Enable Wireless Debugging in Developer Options</li> <li>Ensure your device and computer are connected to the same WiFi network</li> <li>In Android Studio, select \u201cPair Devices Using WiFi\u201d from the run configurations menu</li> <li>On your device, tap \u201cWireless Debugging\u201d and select either:</li> <li>\u201cPair device with QR code\u201d and scan the displayed QR code</li> <li>\u201cPair device with pairing code\u201d and enter the six-digit code shown[12]</li> </ul> <p>Step 2: Connect and Debug</p> <ul> <li>Once paired, your device will appear in Android Studio\u2019s device dropdown menu</li> <li>You can now deploy and debug your applications wirelessly</li> <li>The connection will persist until you disconnect or turn off wireless debugging[1]</li> </ul>"},{"location":"2.%20Android/03b-usb-wifi-debugging/#security-considerations","title":"Security Considerations","text":"<p>Warning</p> <p>Using wireless debugging on public WiFi networks poses significant security risks</p> <ul> <li>Malicious actors could potentially intercept debugging data through man-in-the-middle attacks[4]</li> <li>Unsecured networks make your device vulnerable to packet sniffing and data interception[4]</li> <li>Public networks may have rogue access points that mimic legitimate networks[16]</li> </ul> <p>Best Practices for Secure Debugging:</p> <ul> <li>Only use wireless debugging on trusted, secure networks</li> <li>Consider setting up a mobile hotspot instead of using public WiFi[3]</li> <li>Disable wireless debugging when not actively using it to prevent unauthorized access[19]</li> <li>Remember that wireless debugging automatically turns off when WiFi is disconnected[20]</li> </ul> Citations <ul> <li>[1] https://www.androidpolice.com/use-wireless-adb-android-phone/</li> <li>[2] https://developer.android.com/studio/run/device.html</li> <li>[3] https://www.reddit.com/r/androiddev/comments/cn2ph7/debug_over_wifi_on_a_public_wifi/</li> <li>[4] https://us.norton.com/blog/privacy/public-wifi</li> <li>[5] https://blog.stackademic.com/wireless-debugging-on-any-android-device-android-tips-81701131cd21?gi=692d03bd87ce</li> <li>[6] https://www.youtube.com/watch?v=RjjE0Fro61Q</li> <li>[7] https://stackoverflow.com/questions/4893953/run-install-debug-android-applications-over-wi-fi</li> <li>[8] https://www.youtube.com/watch?v=ElahzmTPCYE</li> <li>[9] https://www.howtogeek.com/how-to-enable-and-use-wireless-adb-on-your-android-phone/</li> <li>[10] https://www.muvi.com/blogs/wireless-debugging-setup-in-android-studio/</li> <li>[11] https://www.youtube.com/watch?v=SEGC-FxGf40</li> <li>[12] https://developer.android.com/tools/adb</li> <li>[13] https://helpcenter.trendmicro.com/en-us/article/tmka-19373</li> <li>[14] https://www.kaspersky.com/resource-center/preemptive-safety/public-wifi-risks</li> <li>[15] https://stackoverflow.com/questions/71221039/wi-fi-debug-adb-there-was-an-error-pairing-the-device</li> <li>[16] https://www.cyber.gc.ca/en/guidance/protecting-your-organization-while-using-wi-fi-itsap80009</li> <li>[17] https://xdaforums.com/t/adb-wireless-debugging-wi-fi-is-there-an-updated-xda-tutorial-yet-on-setting-up-adb-completely-wirelessly-as-of-android-11-no-usb-cable.4476819/</li> <li>[18] https://source.android.com/docs/core/connect/wifi-debug</li> <li>[19] https://xdaforums.com/t/is-it-fine-to-leave-wireless-debugging-enabled-or-does-it-drain-battery.4634619/</li> <li>[20] https://xdaforums.com/t/android-12-developer-options-adb-wireless-debugging-option-keeps-turning-off.4461375/</li> </ul>"},{"location":"2.%20Android/04-hockey-v1/","title":"4. Hockey Application Version 1","text":"<p>This code defines a structure to represent hockey players and creates user interface components using Jetpack Compose to display these players in a list. It includes a data class for players, a function to generate sample players, and two main composable functions: one to display an individual player card and another to display a list of these cards.</p>"},{"location":"2.%20Android/04-hockey-v1/#detailed-explanation-of-composable-functions","title":"Detailed Explanation of Composable Functions","text":""},{"location":"2.%20Android/04-hockey-v1/#playercard","title":"<code>PlayerCard</code>","text":"<pre><code>@Composable\nfun PlayerCard(player: Player, modifier: Modifier = Modifier) {\n    // ...\n}\n</code></pre> <p>This composable function creates a card to display information about an individual player.</p> <ul> <li>It takes a <code>Player</code> object and an optional <code>Modifier</code> as parameters.</li> <li>Uses a <code>Card</code> component to create a card with rounded corners and a border.</li> <li>Inside the card, it organizes content in a <code>Column</code> (vertical column).</li> <li>The first <code>Row</code> (horizontal line) contains the player\u2019s image.</li> <li>The second <code>Row</code> displays the player\u2019s number and name.</li> </ul> <p>Components used:</p> <ul> <li><code>Card</code>: Creates an elevated surface with shadow and content.</li> <li><code>Column</code>: Arranges elements vertically.</li> <li><code>Row</code>: Arranges elements horizontally.</li> <li><code>Image</code>: Displays the player\u2019s image.</li> <li><code>Text</code>: Displays text (player\u2019s number and name).</li> <li><code>Spacer</code>: Creates space between elements.</li> </ul> <p>Modifiers used:</p> <ul> <li><code>fillMaxWidth()</code>: Fills all available width.</li> <li><code>padding()</code>: Adds space around elements.</li> <li><code>background()</code>: Sets the background color.</li> <li><code>width()</code>: Sets a specific width.</li> </ul>"},{"location":"2.%20Android/04-hockey-v1/#playerlist","title":"<code>PlayerList</code>","text":"<pre><code>@Composable\nfun PlayerList(modifier: Modifier = Modifier) {\n    LazyColumn(modifier = modifier) {\n        items(getSamplePlayers()) {\n            PlayerCard(player = it)\n        }\n    }\n}\n</code></pre> <p>This composable function creates a scrollable list of player cards.</p> <ul> <li>It uses <code>LazyColumn</code>, which is optimized for displaying long lists of items.</li> <li>The <code>items()</code> function is used to dynamically generate list items from the player list returned by   <code>getSamplePlayers()</code>.</li> <li>For each player in the list, it creates a <code>PlayerCard</code>.</li> </ul> <p>Main component:</p> <ul> <li><code>LazyColumn</code>: A vertical scrolling container that only loads and displays items visible on screen, making it efficient   for long lists.</li> </ul> <p>These two composable functions work together to create an interactive and efficient user interface for displaying a list of hockey players. <code>PlayerCard</code> handles the display of individual player details, while <code>PlayerList</code> organizes these cards in a scrollable list.</p>"},{"location":"2.%20Android/05-etats-evenements/","title":"5. State and Event Management","text":""},{"location":"2.%20Android/05-etats-evenements/#example-inputexamples","title":"Example: InputExamples","text":"<p>Example on GitHub</p>"},{"location":"2.%20Android/05-etats-evenements/#textlengthcounter-function","title":"<code>TextLengthCounter</code> Function","text":"<p>The <code>TextLengthCounter</code> function is a Jetpack Compose composable that creates a user interface allowing users to enter text and display its length in characters. It uses states to manage the entered text and its length, and dynamically updates the display.</p> <p>Here\u2019s a detailed description of the function:</p>"},{"location":"2.%20Android/05-etats-evenements/#function-declaration","title":"Function Declaration:","text":"<p><pre><code>@Composable\nfun TextLengthCounter(modifier: Modifier = Modifier)\n</code></pre> - It\u2019s a composable function that can receive a <code>Modifier</code> as a parameter.</p>"},{"location":"2.%20Android/05-etats-evenements/#state-management","title":"State Management:","text":"<p><pre><code>var text by remember { mutableStateOf(\"\") }\nvar length by remember { mutableIntStateOf(0) }\n</code></pre> - Two state variables are created: <code>text</code> to store the entered text and <code>length</code> for the text length. - <code>remember</code> is used to preserve these states between recompositions.</p>"},{"location":"2.%20Android/05-etats-evenements/#interface-structure","title":"Interface Structure:","text":"<pre><code>Column(\n    modifier = Modifier\n        .padding(16.dp)\n        .fillMaxWidth(),\n    horizontalAlignment = Alignment.CenterHorizontally\n) {\n    // Column content\n}\n</code></pre> <ul> <li>A <code>Column</code> is used to organize interface elements vertically.</li> <li>A padding of 16dp is applied, and the column occupies all available width.</li> <li>Elements are horizontally centered.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#input-field","title":"Input Field:","text":"<pre><code>TextField(\n    value = text,\n    onValueChange = {\n        text = it\n        length = text.length\n    },\n    label = { Text(\"Enter text\") },\n    modifier = Modifier.fillMaxWidth()\n)\n</code></pre> <ul> <li>A <code>TextField</code> allows users to enter text.</li> <li>The field value is bound to the <code>text</code> state.</li> <li>With each change, <code>text</code> is updated and <code>length</code> is recalculated.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#spacing","title":"Spacing:","text":"<pre><code>Spacer(modifier = Modifier.height(16.dp))\n</code></pre> <ul> <li><code>Spacer</code>s are used to add vertical space between elements.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#calculate-button","title":"Calculate Button:","text":"<pre><code>Button(\n    onClick = { length = text.length }\n) {\n    Text(\"Calculate length\")\n}\n</code></pre> <ul> <li>A button allows manual recalculation of the text length.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#length-display","title":"Length Display:","text":"<pre><code>Text(\"Text length: $length characters\")\n</code></pre> <ul> <li>A <code>Text</code> displays the current text length.</li> </ul> <p>This function illustrates several important Jetpack Compose concepts, including state management, component reactivity, and user interface organization. It shows how to create a simple but functional interactive interface.</p>"},{"location":"2.%20Android/05-etats-evenements/#state-management-with-remember-and-mutablestateof","title":"State Management with <code>remember</code> and <code>mutableStateOf</code>","text":"<p>In Jetpack Compose, state is a crucial concept. It represents any data that can change over time and, when changed, can trigger a recomposition of the user interface.</p> <pre><code>var text by remember { mutableStateOf(\"\") }\nvar length by remember { mutableIntStateOf(0) }\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#role-of-remember","title":"Role of <code>remember</code>","text":"<ul> <li><code>remember</code> is a function that allows preserving an object between recompositions.</li> <li>Without <code>remember</code>, each recomposition would create a new object, losing the previous state.</li> <li><code>remember</code> \u201cmemorizes\u201d the initial object and reuses it during subsequent recompositions.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#function-of-mutablestateof","title":"Function of <code>mutableStateOf</code>","text":"<ul> <li><code>mutableStateOf</code> creates a <code>MutableState&lt;T&gt;</code> object that encapsulates a mutable value.</li> <li>When this value changes, Compose is notified and can trigger a recomposition if necessary.</li> <li><code>mutableIntStateOf</code> is a specialized version for integers, optimized for performance.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#delegation-with-by","title":"Delegation with <code>by</code>","text":"<ul> <li>The <code>by</code> keyword is used for property delegation in Kotlin.</li> <li>It allows using <code>text</code> and <code>length</code> directly as if they were normal variables, while benefiting from <code>MutableState</code> reactivity.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#lambdas-and-state-updates","title":"Lambdas and State Updates","text":"<p>Lambdas are used to define behaviors in response to events, such as value changes or clicks.</p>"},{"location":"2.%20Android/05-etats-evenements/#in-textfield","title":"In TextField","text":"<pre><code>onValueChange = {\n    text = it\n    length = text.length\n}\n</code></pre> <ul> <li>This lambda is called each time the <code>TextField</code> content changes.</li> <li><code>it</code> represents the new text field value.</li> <li>The lambda updates <code>text</code> with the new value and immediately recalculates <code>length</code>.</li> <li>These updates trigger a recomposition, updating the user interface.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#in-button","title":"In Button","text":"<pre><code>onClick = { length = text.length }\n</code></pre> <ul> <li>This lambda is simpler, called when the button is clicked.</li> <li>It recalculates <code>length</code> based on the current value of <code>text</code>.</li> <li>While this may seem redundant here (since <code>length</code> is already up to date), it could be useful in more complex scenarios.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#reactivity-and-data-flow","title":"Reactivity and Data Flow","text":"<ol> <li>When the user types text, <code>onValueChange</code> is called.</li> <li><code>text</code> is updated, which notifies Compose of a state change.</li> <li><code>length</code> is also immediately updated.</li> <li>Compose detects these state changes and triggers a recomposition.</li> <li>During recomposition, the <code>TextField</code> displays the new text, and the <code>Text</code> below displays the new length.</li> </ol> <p>This approach ensures that the user interface always stays synchronized with the application\u2019s internal state, providing a reactive and consistent user experience.</p>"},{"location":"2.%20Android/05-etats-evenements/#fruitselector-function","title":"FruitSelector Function","text":"<p>The <code>FruitSelector</code> function is a Jetpack Compose composable that creates a fruit selector as a dropdown menu. It allows users to choose a fruit from a predefined list and displays the selected fruit.</p> <pre><code>@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FruitSelector(modifier: Modifier = Modifier) {\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#function-declaration_1","title":"Function Declaration","text":"<pre><code>- `@OptIn(ExperimentalMaterial3Api::class)` indicates the use of experimental Material 3 APIs.\n- It's a composable function that accepts an optional `modifier`.\n</code></pre> <pre><code>    val fruits = listOf(\"Apple\", \"Banana\", \"Orange\", \"Strawberry\", \"Kiwi\")\n    var expanded by remember { mutableStateOf(false) }\n    var selectedFruit by rememberSaveable { mutableStateOf(\"\") }\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#state-initialization","title":"State Initialization","text":"<ul> <li><code>fruits</code> is a static list of fruits.</li> <li><code>expanded</code> is a boolean state to control opening/closing the dropdown menu.</li> <li><code>selectedFruit</code> is a state to store the selected fruit. <code>rememberSaveable</code> is used to preserve the selection even after a configuration change (like screen rotation).</li> </ul> <pre><code>    Column(modifier = modifier.padding(16.dp)) {\n       ExposedDropdownMenuBox(\n           expanded = expanded,\n           onExpandedChange = { expanded = !expanded }\n       ) {\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#interface-structure_1","title":"Interface Structure","text":"<ul> <li>A <code>Column</code> contains all elements with 16dp padding.</li> <li><code>ExposedDropdownMenuBox</code> is the main container for the dropdown menu.</li> </ul> <pre><code>            TextField(\n                value = selectedFruit,\n                onValueChange = {},\n                readOnly = true,\n                label = { Text(\"Choose a fruit\") },\n                trailingIcon = {\n                    ExposedDropdownMenuDefaults\n                        .TrailingIcon(expanded = expanded)\n                },\n                modifier = Modifier\n                    .menuAnchor()\n                    .fillMaxWidth()\n            )\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#selector-text-field","title":"Selector Text Field","text":"<ul> <li>A <code>TextField</code> displays the selected fruit.</li> <li>It is read-only (<code>readOnly = true</code>).</li> <li>A dropdown icon is added on the right.</li> <li><code>.menuAnchor()</code> links this field to the dropdown menu.</li> </ul> <pre><code>            ExposedDropdownMenu(\n                expanded = expanded,\n                onDismissRequest = { expanded = false }\n            ) {\n                fruits.forEach { fruit -&gt;\n                    DropdownMenuItem(\n                        text = { Text(fruit) },\n                        onClick = {\n                            selectedFruit = fruit\n                            expanded = false\n                        }\n                    )\n                }\n            }\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#dropdown-menu","title":"Dropdown Menu","text":"<ul> <li><code>ExposedDropdownMenu</code> contains the list of fruits.</li> <li>Each fruit is represented by a <code>DropdownMenuItem</code>.</li> <li>When clicking a fruit, <code>selectedFruit</code> is updated and the menu closes.</li> </ul> <pre><code>        Spacer(modifier = Modifier.height(16.dp))\n        if (selectedFruit.isNotEmpty()) {\n            Text(\"Selected fruit: $selectedFruit\")\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#selection-display","title":"Selection Display","text":"<ul> <li>A vertical space is added.</li> <li>If a fruit is selected, it is displayed below the menu.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#overall-operation","title":"Overall Operation","text":"<ul> <li>The user sees a text field with the label \u201cChoose a fruit\u201d.</li> <li>Clicking on the field opens a dropdown menu with the list of fruits.</li> <li>Selecting a fruit updates the <code>selectedFruit</code> state and closes the menu.</li> <li>The selected fruit is displayed in the text field and below it.</li> </ul> <p>This function illustrates several advanced Jetpack Compose concepts:</p> <ul> <li>Using Material 3 components to create an interactive dropdown menu.</li> <li>State management with <code>remember</code> and <code>rememberSaveable</code>.</li> <li>Creating a dynamic and reactive user interface.</li> <li>Using lambdas to handle user interactions.</li> <li>Conditional display based on state (<code>if (selectedFruit.isNotEmpty())</code>).</li> </ul>"},{"location":"2.%20Android/06-hockey-v2/","title":"6. Hockey Application Version 2","text":""},{"location":"2.%20Android/06-hockey-v2/#explanation-of-playerlistwithsearch","title":"Explanation of <code>PlayerListWithSearch</code>","text":"<p>This new version adds a search functionality to the player list. Here\u2019s a detailed explanation of the modifications:</p>"},{"location":"2.%20Android/06-hockey-v2/#getplayers-function","title":"<code>getPlayers</code> Function","text":"<pre><code>fun getPlayers(name: String? = null): List&lt;Player&gt; =\n    if (name == null)\n        getSamplePlayers()\n    else\n        getSamplePlayers().filter { it.name.lowercase().contains(name.lowercase()) }.toList()\n</code></pre> <p>This function allows filtering the player list based on a search criterion:</p> <ul> <li>If <code>name</code> is <code>null</code>, it returns all players.</li> <li>Otherwise, it filters the list to return only players whose name contains the search string (case-insensitive).</li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#playerlistwithsearch-composable","title":"<code>PlayerListWithSearch</code> Composable","text":"<pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier) {\n    var searchCriteria by rememberSaveable { mutableStateOf(\"\") }\n    Column {\n        TextField(\n            value = searchCriteria,\n            onValueChange = { searchCriteria = it },\n            modifier = modifier\n        )\n        LazyColumn(modifier = modifier.fillMaxSize()) {\n            items(getPlayers(searchCriteria)) {\n                PlayerCard(player = it)\n            }\n        }\n    }\n}\n</code></pre> <p>This composable replaces <code>PlayerList</code> and adds search functionality:</p> <ol> <li> <p><code>searchCriteria</code>:</p> <ul> <li>Uses <code>rememberSaveable</code> to preserve the search state even during recompositions.</li> <li><code>mutableStateOf(\"\")</code> initializes the search value to an empty string.</li> </ul> </li> <li> <p><code>Column</code>:</p> <ul> <li>Vertically organizes the search field and player list.</li> </ul> </li> <li> <p><code>TextField</code>:</p> <ul> <li>Allows users to enter a search criterion.</li> <li><code>value = searchCriteria</code> displays the current value.</li> <li><code>onValueChange = { searchCriteria = it }</code> updates <code>searchCriteria</code> with each change.</li> </ul> </li> <li> <p><code>LazyColumn</code>:</p> <ul> <li>Similar to the previous version, but now uses <code>getPlayers(searchCriteria)</code>.</li> <li>This dynamically filters the player list based on the search criterion.</li> </ul> </li> <li> <p><code>items</code>:</p> <ul> <li>Creates a <code>PlayerCard</code> for each filtered player.</li> </ul> </li> </ol> <p>This new version offers a more interactive user experience, allowing users to search for specific players in the list. The list updates automatically with each change in the search field text, thanks to the use of state (<code>searchCriteria</code>) and Jetpack Compose\u2019s automatic recomposition.</p>"},{"location":"2.%20Android/06-hockey-v2/#connections-between-textfield-mutablestateof-onvaluechange-and-getplayers","title":"Connections between <code>TextField</code>, <code>mutableStateOf</code>, <code>onValueChange</code>, and <code>getPlayers()</code>","text":""},{"location":"2.%20Android/06-hockey-v2/#1-mutablestateof-and-composable-state","title":"1. <code>mutableStateOf</code> and Composable State","text":"<pre><code>var searchCriteria by rememberSaveable { mutableStateOf(\"\") }\n</code></pre> <ul> <li><code>mutableStateOf(\"\")</code> creates a mutable state initialized with an empty string.</li> <li><code>rememberSaveable</code> allows preserving this state even during recompositions or configuration changes.</li> <li><code>by</code> is used to delegate the property, allowing direct access and modification of <code>searchCriteria</code>.</li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#2-textfield-and-onvaluechange","title":"2. <code>TextField</code> and <code>onValueChange</code>","text":"<pre><code>TextField(\n    value = searchCriteria,\n    onValueChange = { searchCriteria = it },\n    modifier = modifier\n)\n</code></pre> <ul> <li><code>value = searchCriteria</code>: The <code>TextField</code> displays the current value of <code>searchCriteria</code>.</li> <li><code>onValueChange = { searchCriteria = it }</code>: When the user types in the field:<ul> <li><code>it</code> represents the new field value.</li> <li>This new value is assigned to <code>searchCriteria</code>.</li> <li>This triggers a recomposition of the composable.</li> </ul> </li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#3-connection-with-getplayers","title":"3. Connection with <code>getPlayers()</code>","text":"<pre><code>LazyColumn(modifier = modifier.fillMaxSize()) {\n    items(getPlayers(searchCriteria)) {\n        PlayerCard(player = it)\n    }\n}\n</code></pre> <ul> <li><code>getPlayers(searchCriteria)</code> is called with the current value of <code>searchCriteria</code>.</li> <li>Each time <code>searchCriteria</code> changes:<ul> <li><code>getPlayers()</code> is recalled with the new value.</li> <li>The player list is filtered based on this new value.</li> <li><code>LazyColumn</code> recomposes with the new filtered list.</li> </ul> </li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#4-data-flow-and-recomposition","title":"4. Data Flow and Recomposition","text":"<ol> <li>The user types in the <code>TextField</code>.</li> <li><code>onValueChange</code> is called, updating <code>searchCriteria</code>.</li> <li>Updating <code>searchCriteria</code> triggers a recomposition.</li> <li>During recomposition:<ul> <li><code>TextField</code> displays the new value of <code>searchCriteria</code>.</li> <li><code>getPlayers(searchCriteria)</code> is called with the new value.</li> <li><code>LazyColumn</code> recomposes with the new filtered list.</li> </ul> </li> </ol> <p>This reactive architecture enables real-time updates of the user interface. Each keystroke in the search field triggers a chain of reactions that results in the filtered display of players, providing a smooth and reactive user experience.</p>"},{"location":"2.%20Android/07-orientation/","title":"7. Screen Orientation","text":"<p>To detect screen orientation (portrait or landscape) with Jetpack Compose, you can use the <code>LocalConfiguration</code> composable. Here\u2019s how to do it:</p> <p>1- Import the necessary dependencies:</p> <pre><code>import android.content.res.Configuration\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.platform.LocalConfiguration\n</code></pre> <p>2- Use <code>LocalConfiguration</code> in your composable to get the current configuration:</p> <pre><code>@Composable\nfun MyScreen() {\n    val configuration = LocalConfiguration.current\n\n    when (configuration.orientation) {\n        Configuration.ORIENTATION_LANDSCAPE -&gt; {\n            // Code for landscape orientation\n            Text(\"Screen is in landscape mode\")\n        }\n        else -&gt; {\n            // Code for portrait orientation\n            Text(\"Screen is in portrait mode\")\n        }\n    }\n}\n</code></pre> <p>3- To observe orientation changes, you can use a <code>State</code>:</p> <pre><code>@Composable\nfun OrientationAwareLayout() {\n    val configuration = LocalConfiguration.current\n    val orientation by remember { mutableStateOf(configuration.orientation) }\n\n    LaunchedEffect(configuration) {\n        snapshotFlow { configuration.orientation }\n            .collect { orientation = it }\n    }\n\n    when (orientation) {\n        Configuration.ORIENTATION_LANDSCAPE -&gt; {\n            // Layout for landscape mode\n        }\n        else -&gt; {\n            // Layout for portrait mode\n        }\n    }\n}\n</code></pre> <p>This approach allows your composable to automatically recompose when the orientation changes.</p> <p>By using these methods, you can create responsive user interfaces that adapt to screen orientation. This is particularly useful for optimizing user experience across different devices and screen configurations.</p> <p>Citations:</p> <ul> <li>https://developer.android.com/guide/practices/device-compatibility-mode?hl=fr</li> <li>https://www.geeksforgeeks.org/detect-screen-orientation-in-android-using-jetpack-compose/</li> <li>https://blog.ippon.fr/2023/04/28/developper-app-jetpack-compose-smartphones-pliables/</li> <li>https://developer.android.com/develop/ui/compose/touch-input/pointer-input/drag-swipe-fling?hl=fr</li> <li>https://developer.android.com/develop/ui/compose/touch-input/stylus-input/advanced-stylus-features?hl=fr</li> <li>https://stackoverflow.com/questions/64753944/orientation-on-jetpack-compose</li> <li>https://appmaster.io/fr/blog/comment-creer-une-interface-utilisateur-adaptative-avec-jetpack-compose</li> </ul>"},{"location":"2.%20Android/07-orientation/#complete-example","title":"Complete Example","text":"<pre><code>import android.content.res.Configuration\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.unit.dp\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun OrientationResponsiveLayout(modifier: Modifier = Modifier) {\n    var text1 by remember { mutableStateOf(\"\") }\n    var text2 by remember { mutableStateOf(\"\") }\n\n    val configuration = LocalConfiguration.current\n    val isLandscape = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\n\n    if (isLandscape) {\n        Column(\n            modifier = modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween\n            ) {\n                TextField(\n                    value = text1,\n                    onValueChange = { text1 = it },\n                    label = { Text(\"Field 1\") },\n                    modifier = Modifier.weight(1f).padding(end = 8.dp)\n                )\n                TextField(\n                    value = text2,\n                    onValueChange = { text2 = it },\n                    label = { Text(\"Field 2\") },\n                    modifier = Modifier.weight(1f).padding(start = 8.dp)\n                )\n            }\n            Spacer(modifier = Modifier.height(16.dp))\n            Button(onClick = { /* Button action */ }) {\n                Text(\"Validate\")\n            }\n        }\n    } else {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.spacedBy(16.dp)\n        ) {\n            TextField(\n                value = text1,\n                onValueChange = { text1 = it },\n                label = { Text(\"Field 1\") },\n                modifier = Modifier.fillMaxWidth()\n            )\n            TextField(\n                value = text2,\n                onValueChange = { text2 = it },\n                label = { Text(\"Field 2\") },\n                modifier = Modifier.fillMaxWidth()\n            )\n            Button(onClick = { /* Button action */ }) {\n                Text(\"Validate\")\n            }\n        }\n    }\n}\n</code></pre> <p>In this example:</p> <ol> <li> <p>We use <code>LocalConfiguration.current</code> to get the current screen configuration.</p> </li> <li> <p>We check if the orientation is in landscape mode by comparing <code>configuration.orientation</code> with    <code>Configuration.ORIENTATION_LANDSCAPE</code>.</p> </li> <li> <p>In portrait mode (default):</p> <ul> <li>We use a <code>Column</code> to vertically arrange two <code>TextField</code>s and a <code>Button</code>.</li> <li>Elements are evenly spaced using <code>verticalArrangement = Arrangement.spacedBy(16.dp)</code>.</li> </ul> </li> <li> <p>In landscape mode:</p> <ul> <li>We use a main <code>Column</code> for the overall layout.</li> <li>Inside, we use a <code>Row</code> to place the two <code>TextField</code>s side by side.</li> <li>The <code>Button</code> is placed below the <code>Row</code> with a <code>Spacer</code> to add spacing.</li> </ul> </li> <li> <p>The <code>TextField</code>s use <code>Modifier.weight(1f)</code> in landscape mode to occupy equal space in the <code>Row</code>.</p> </li> <li> <p>We use <code>remember</code> and <code>mutableStateOf</code> to manage the text fields\u2019 state, allowing users to interact with them.</p> </li> </ol> <p>This composable will automatically adapt to the screen orientation, providing an optimized layout for both portrait and landscape modes. It demonstrates how to create responsive user interfaces that adapt to different screen configurations using Jetpack Compose.</p> <p>Citations:</p> <ul> <li>https://developer.android.com/develop/ui/compose/layouts/adaptive</li> <li>https://www.blog.finotes.com/post/creating-responsive-layouts-in-android-using-jetpack-compose</li> <li>https://stackoverflow.com/questions/67157309/how-to-create-responsive-layouts-with-jetpack-compose</li> <li>https://composables.com/jetpack-compose-tutorials/responsive-layout</li> <li>https://www.geeksforgeeks.org/detect-screen-orientation-in-android-using-jetpack-compose/</li> <li>https://eevis.codes/blog/2024-07-18/dont-lock-the-screen-orientation-handling-orientation-in-compose/</li> </ul>"},{"location":"2.%20Android/08-hockey-v3/","title":"8. Hockey Application Version 3","text":""},{"location":"2.%20Android/08-hockey-v3/#different-versions-of-playerlistwithsearch","title":"Different Versions of <code>PlayerListWithSearch</code>","text":""},{"location":"2.%20Android/08-hockey-v3/#previous-version","title":"Previous Version","text":"<pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier) {\n    var nameSearch by rememberSaveable { mutableStateOf(\"\") }\n    var numberSearch: Int? by rememberSaveable { mutableStateOf(null) }\n    Column(modifier = modifier) {\n        Column(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)) {\n            TextField(\n                value = nameSearch,\n                label = { Text(text = \"Name\") },\n                onValueChange = { nameSearch = it },\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(start = 20.dp, end = 20.dp)\n            )\n            TextField(\n                value = (numberSearch ?: \"\").toString(),\n                label = { Text(text = \"Number\") },\n                onValueChange = {\n                    numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch\n                },\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(start = 20.dp, end = 20.dp)\n            )\n        }\n\n        LazyColumn(modifier = Modifier.fillMaxSize()) {\n            items(getPlayers(nameSearch, numberSearch)) {\n                HockeyPlayerCard(player = it)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/08-hockey-v3/#general-description","title":"General Description","text":"<p>This code defines a composable function named <code>PlayerListWithSearch</code> that creates a user interface to display a list of hockey players with search functionality. The interface includes two text fields for searching (one for name and one for number) and a scrollable list of players matching the search criteria.</p>"},{"location":"2.%20Android/08-hockey-v3/#detailed-description","title":"Detailed Description","text":"<p>1- Function Declaration:</p> <pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier)\n</code></pre> <ul> <li>It\u2019s a composable function that accepts an optional <code>modifier</code> as a parameter.</li> </ul> <p>2- State Variables:</p> <pre><code>var nameSearch by rememberSaveable { mutableStateOf(\"\") }\nvar numberSearch: Int? by rememberSaveable { mutableStateOf(null) }\n</code></pre> <ul> <li><code>nameSearch</code>: A string to store the name search.</li> <li><code>numberSearch</code>: A nullable integer to store the number search.</li> <li>These variables use <code>rememberSaveable</code> to preserve their state even after reconfiguration.</li> </ul> <p>3- Main Structure:</p> <pre><code>Column(modifier = modifier) {\n    // Content\n}\n</code></pre> <ul> <li>Uses a <code>Column</code> as the main container with the modifier passed as parameter.</li> </ul> <p>4- Search Fields:</p> <pre><code>Column(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)) {\n    // Text fields\n}\n</code></pre> <ul> <li>An inner <code>Column</code> with padding to contain the search fields.</li> </ul> <p>5- Name Search Field:</p> <pre><code>TextField(\n    value = nameSearch,\n    label = { Text(text = \"Name\") },\n    onValueChange = { nameSearch = it },\n    modifier = Modifier\n        .fillMaxWidth()\n        .padding(start = 20.dp, end = 20.dp)\n)\n</code></pre> <ul> <li>A <code>TextField</code> for name search.</li> <li>The value is bound to <code>nameSearch</code>.</li> <li>The label displays \u201cName\u201d.</li> <li><code>onValueChange</code> updates <code>nameSearch</code> with the new value.</li> </ul> <p>6- Number Search Field:</p> <pre><code>TextField(\n    value = (numberSearch ?: \"\").toString(),\n    label = { Text(text = \"Number\") },\n    onValueChange = {\n        numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch\n    },\n    modifier = Modifier\n        .fillMaxWidth()\n        .padding(start = 20.dp, end = 20.dp)\n)\n</code></pre> <ul> <li>A <code>TextField</code> for number search.</li> <li>The displayed value is the string conversion of <code>numberSearch</code> (or empty string if null).</li> <li>The label displays \u201cNumber\u201d.</li> <li><code>onValueChange</code> attempts to convert the input to an integer, keeping the previous value if conversion fails.</li> </ul> <p>7- Player List:</p> <pre><code>LazyColumn(modifier = Modifier.fillMaxSize()) {\n    items(getPlayers(nameSearch, numberSearch)) {\n        HockeyPlayerCard(player = it)\n    }\n}\n</code></pre> <ul> <li>Uses a <code>LazyColumn</code> to efficiently display a potentially long list of players.</li> <li><code>getPlayers(nameSearch, numberSearch)</code> is called to get the filtered list of players.</li> <li>Each player is displayed using a <code>HockeyPlayerCard</code> component.</li> </ul> <p>This code creates an interactive user interface allowing users to search for hockey players by name and number, with dynamic updating of the displayed list based on search criteria.</p>"},{"location":"2.%20Android/08-hockey-v3/#new-version","title":"New Version","text":"<pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier) {\n    var nameSearch by rememberSaveable { mutableStateOf(\"\") }\n    var numberSearch: Int? by rememberSaveable { mutableStateOf(null) }\n    Column(modifier = modifier) {\n        SearchTextFields(\n            nameSearch = nameSearch,\n            onNameChange = { nameSearch = it },\n            numberSearch = numberSearch,\n            onNumberChange =\n                { numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch })\n\n        LazyColumn(modifier = Modifier.fillMaxSize()) {\n            items(getPlayers(nameSearch, numberSearch)) {\n                HockeyPlayerCard(player = it)\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun SearchTextFields(\n    nameSearch: String,\n    onNameChange: (String) -&gt; Unit,\n    numberSearch: Int?,\n    onNumberChange: (String) -&gt; Unit,\n) {\n    Column(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)) {\n        TextField(\n            value = nameSearch,\n            label = { Text(text = \"Name\") },\n            onValueChange = onNameChange,\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(start = 20.dp, end = 20.dp)\n        )\n        TextField(\n            value = (numberSearch ?: \"\").toString(),\n            label = { Text(text = \"Number\") },\n            onValueChange = onNumberChange,\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(start = 20.dp, end = 20.dp)\n        )\n    }\n}\n</code></pre> <p>This refactoring illustrates how to improve code structure and reusability in Jetpack Compose. Here\u2019s a detailed explanation of the transition between the two versions, focusing on state management and lambda functions:</p> <ol> <li> <p>Creation of the new <code>SearchTextFields</code> composable:</p> <ul> <li>A new private composable was created to encapsulate the search fields logic.</li> <li>This improves code readability and reusability.</li> </ul> </li> <li> <p>Parameters of the new composable:</p> <ul> <li><code>nameSearch: String</code>: The current value of the name search.</li> <li><code>onNameChange: (String) -&gt; Unit</code>: A lambda function to handle name changes.</li> <li><code>numberSearch: Int?</code>: The current value of the number search.</li> <li><code>onNumberChange: (String) -&gt; Unit</code>: A lambda function to handle number changes.</li> </ul> </li> <li> <p>Passing state variables:</p> <ul> <li>In <code>PlayerListWithSearch</code>, state variables <code>nameSearch</code> and <code>numberSearch</code> are passed directly to   <code>SearchTextFields</code>.</li> <li>This allows <code>SearchTextFields</code> to use these values without owning or modifying them directly.</li> </ul> </li> <li> <p>Passing lambda functions:</p> <ul> <li>For <code>onNameChange</code>, a simple lambda is passed: <code>{ nameSearch = it }</code>.   This lambda directly updates the <code>nameSearch</code> state variable.</li> <li>For <code>onNumberChange</code>, the conversion logic is passed as a lambda:   <pre><code>{ numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch }\n</code></pre>   This lambda handles the string to integer conversion and updating <code>numberSearch</code>.</li> </ul> </li> <li> <p>Usage in <code>SearchTextFields</code>:</p> <ul> <li>The <code>TextField</code>s now use the passed parameters instead of directly accessing state variables.</li> <li><code>value = nameSearch</code> and <code>value = (numberSearch ?: \"\").toString()</code> use the passed values.</li> <li><code>onValueChange = onNameChange</code> and <code>onValueChange = onNumberChange</code> use the passed lambdas.</li> </ul> </li> <li> <p>Advantages of this approach:</p> <ul> <li>Separation of concerns: <code>SearchTextFields</code> only handles display and input collection.</li> <li>State hoisting: State remains in the parent component, making <code>SearchTextFields</code> more flexible and reusable.</li> <li>Improved testability: It\u2019s easier to test <code>SearchTextFields</code> independently.</li> </ul> </li> <li> <p>Implications for state management:</p> <ul> <li>State (<code>nameSearch</code> and <code>numberSearch</code>) is still managed in <code>PlayerListWithSearch</code>.</li> <li><code>SearchTextFields</code> becomes a stateless component, only reflecting the state passed to it.</li> </ul> </li> </ol> <p>This refactoring is an excellent example of how to apply the \u201cstate hoisting\u201d principle in Jetpack Compose, by elevating state and state modification functions to the parent component. This makes the code more modular, easier to maintain and test, while maintaining a clear separation of responsibilities between components.</p>"},{"location":"2.%20Android/09-etats-evenements-v2/","title":"9. State and Event Management","text":""},{"location":"2.%20Android/09-etats-evenements-v2/#example-inputexamples","title":"Example: InputExamples","text":"<p>Example on GitHub</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#first-version","title":"First Version","text":"<pre><code>@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FruitSelector(modifier: Modifier = Modifier) {\n    val fruits = listOf(\"Apple\", \"Banana\", \"Orange\", \"Strawberry\", \"Kiwi\")\n    var expanded by remember { mutableStateOf(false) }\n    var selectedFruit by remember { mutableStateOf(\"\") }\n\n    Column(modifier = modifier.padding(16.dp)) {\n        ExposedDropdownMenuBox(\n            expanded = expanded,\n            onExpandedChange = { expanded = !expanded }\n        ) {\n            TextField(\n                value = selectedFruit,\n                onValueChange = {},\n                readOnly = true,\n                label = { Text(\"Choose a fruit\") },\n                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },\n                modifier = Modifier\n                    .menuAnchor()\n                    .fillMaxWidth()\n            )\n\n            ExposedDropdownMenu(\n                expanded = expanded,\n                onDismissRequest = { expanded = false }\n            ) {\n                fruits.forEach { fruit -&gt;\n                    DropdownMenuItem(\n                        text = { Text(fruit) },\n                        onClick = {\n                            selectedFruit = fruit\n                            expanded = false\n                        }\n                    )\n                }\n            }\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        if (selectedFruit.isNotEmpty()) {\n            Text(\"Selected fruit: $selectedFruit\")\n        }\n    }\n}\n\n@Composable\nfun App(modifier: Modifier = Modifier) {\n    Column(modifier = modifier) {\n        TextLengthCounter()\n        Spacer(modifier = Modifier.height(100.dp))\n        FruitSelector()\n    }\n}\n</code></pre>"},{"location":"2.%20Android/09-etats-evenements-v2/#general-description","title":"General Description","text":"<ol> <li> <p><code>FruitSelector</code>: This is a composable function that creates a fruit selector in the form of a dropdown menu.</p> </li> <li> <p><code>App</code>: This is the main composable function that structures the application\u2019s user interface by combining different    components.</p> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#focus-on-fruitselector","title":"Focus on FruitSelector","text":"<p>The <code>FruitSelector</code> function is a Jetpack Compose component that creates a dropdown menu allowing users to select a fruit from a predefined list. Here are its main features:</p> <ol> <li> <p>Fruit List: A static list of fruits is defined at the beginning of the function.</p> </li> <li> <p>States:</p> <ul> <li><code>expanded</code>: A boolean state that controls whether the dropdown menu is open or closed.</li> <li><code>selectedFruit</code>: A state that stores the currently selected fruit.</li> </ul> </li> <li> <p>User Interface:</p> <ul> <li>Uses <code>ExposedDropdownMenuBox</code> to create the dropdown menu container.</li> <li>Displays a <code>TextField</code> that serves as a trigger to open the menu. This field is read-only and displays the   selected fruit.</li> <li>The dropdown menu (<code>ExposedDropdownMenu</code>) contains the list of fruits, each represented by a <code>DropdownMenuItem</code>.</li> </ul> </li> <li> <p>Interaction:</p> <ul> <li>When a fruit is selected, the menu closes and the chosen fruit is displayed in the TextField.</li> <li>Additional text appears below to confirm the selected fruit.</li> </ul> </li> <li> <p>Layout:</p> <ul> <li>Uses a <code>Column</code> to vertically organize elements.</li> <li>Adds spacing and padding to improve appearance.</li> </ul> </li> <li> <p>Customization:</p> <ul> <li>Accepts a <code>modifier</code> parameter to allow additional customization if needed.</li> </ul> </li> </ol> <p>This function demonstrates the use of several important Jetpack Compose concepts, such as state management, Material 3 UI components, and the creation of interactive components. It provides an intuitive user interface for selecting items from a list, which is a common functionality in many applications.</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#second-version","title":"Second Version","text":"<pre><code>@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FruitSelector(\n    modifier: Modifier = Modifier,\n    fruits: List&lt;String&gt;,\n    selectedFruit: String,\n    onFruitSelected: (String) -&gt; Unit = {}\n) {\n    var expanded by remember { mutableStateOf(false) }\n\n    Column(modifier = modifier.padding(16.dp)) {\n        ExposedDropdownMenuBox(\n            expanded = expanded,\n            onExpandedChange = { expanded = !expanded }\n        ) {\n            TextField(\n                value = selectedFruit,\n                onValueChange = {},\n                readOnly = true,\n                label = { Text(\"Choose a fruit\") },\n                trailingIcon = {\n                    ExposedDropdownMenuDefaults\n                        .TrailingIcon(expanded = expanded)\n                },\n                modifier = Modifier\n                    .menuAnchor()\n                    .fillMaxWidth()\n            )\n\n            ExposedDropdownMenu(\n                expanded = expanded,\n                onDismissRequest = { expanded = false }\n            ) {\n                fruits.forEach { fruit -&gt;\n                    DropdownMenuItem(\n                        text = { Text(fruit) },\n                        onClick = {\n                            onFruitSelected(fruit)\n                            expanded = false\n                        }\n                    )\n                }\n            }\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        if (selectedFruit.isNotEmpty()) {\n            Text(\"Selected fruit: $selectedFruit\")\n        }\n    }\n}\n\n@Composable\nfun App(modifier: Modifier = Modifier) {\n    var selectedFruit1 by rememberSaveable { mutableStateOf(\"\") }\n    var selectedFruit2 by rememberSaveable { mutableStateOf(\"\") }\n\n    Column(modifier = modifier) {\n        TextLengthCounter()\n        Spacer(modifier = Modifier.height(100.dp))\n        FruitSelector(\n            fruits = listOf(\"Apple\", \"Banana\", \"Orange\", \"Strawberry\", \"Kiwi\"),\n            selectedFruit = selectedFruit1,\n            onFruitSelected = { fruit -&gt; selectedFruit1 = fruit }\n        )\n        Spacer(modifier = Modifier.height(10.dp))\n        FruitSelector(\n            fruits = listOf(\"Pear\", \"Mango\", \"Orange\", \"Blueberry\", \"Grapefruit\"),\n            selectedFruit = selectedFruit2,\n            onFruitSelected = { fruit -&gt; selectedFruit2 = fruit }\n        )\n        Spacer(modifier = Modifier.height(10.dp))\n        Text(\"Selected fruit 1: ${selectedFruit1 ?: \"None\"}\")\n        Text(\"Selected fruit 2: ${selectedFruit2 ?: \"None\"}\")\n    }\n}\n</code></pre> <p>This new version of the application demonstrates significant refactoring, primarily focused on state hoisting and component reusability. Let\u2019s examine the changes and their implications in detail:</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#fruitselector-refactoring","title":"FruitSelector Refactoring","text":"<ol> <li> <p>State Hoisting:</p> <ul> <li><code>selectedFruit</code> is no longer managed inside <code>FruitSelector</code>. It\u2019s now passed as a parameter.</li> <li>A new <code>onFruitSelected</code> function is added as a parameter to handle selection changes.</li> </ul> </li> <li> <p>Added Parameters:</p> <ul> <li><code>fruits: List&lt;String&gt;</code>: The fruit list is now a parameter, making the component more flexible.</li> <li><code>selectedFruit: String</code>: The selected fruit state is passed as a parameter.</li> <li><code>onFruitSelected: (String) -&gt; Unit</code>: A callback function to handle fruit selection.</li> </ul> </li> <li> <p>Remaining Local State:</p> <ul> <li><code>expanded</code> remains a local state as it only concerns the dropdown menu display.</li> </ul> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#changes-in-app","title":"Changes in App","text":"<ol> <li> <p>State Management:</p> <ul> <li>Two new state variables are introduced: <code>selectedFruit1</code> and <code>selectedFruit2</code>.</li> <li>These states are created with <code>rememberSaveable</code> to persist across recompositions and configuration changes.</li> </ul> </li> <li> <p>FruitSelector Usage:</p> <ul> <li>Two instances of <code>FruitSelector</code> are created, each with its own fruit list and state.</li> <li>The state and update function are passed to each <code>FruitSelector</code>.</li> </ul> </li> <li> <p>Selection Display:</p> <ul> <li>Selected fruits are displayed at the bottom of the App, demonstrating that state is now managed at the top level.</li> </ul> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#benefits-of-this-refactoring","title":"Benefits of this Refactoring","text":"<ol> <li> <p>Reusability: <code>FruitSelector</code> can now be used multiple times with different fruit lists.</p> </li> <li> <p>Separation of Concerns: State management is separated from display, making the code more modular.</p> </li> <li> <p>Increased Control: The App now has full control over selection states, allowing for more complex interactions if    needed.</p> </li> <li> <p>Improved Testability: It\u2019s easier to test <code>FruitSelector</code> as its behavior depends entirely on passed props.</p> </li> <li> <p>Flexibility: The fruit list can be dynamic, coming from an API or database, for example.</p> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#focus-on-state-variables","title":"Focus on State Variables","text":"<ul> <li> <p>In <code>App</code>, <code>selectedFruit1</code> and <code>selectedFruit2</code> are state variables created with <code>rememberSaveable</code>. This means they   will retain their value even during configuration changes (like screen rotation).</p> </li> <li> <p>In <code>FruitSelector</code>, only <code>expanded</code> remains a local state variable, as it only concerns the internal display of the   component.</p> </li> </ul> <p>This refactoring illustrates important Jetpack Compose principles, particularly state hoisting and creating reusable, independent components. It allows for better application state management and greater flexibility in building the user interface.</p>"},{"location":"2.%20Android/10-localisation/","title":"10. Localization","text":"<p>Here\u2019s a guide to integrate localization in an Android application developed with Jetpack Compose:</p>"},{"location":"2.%20Android/10-localisation/#general-principles-of-localization","title":"General Principles of Localization","text":"<p>Localizing an Android application involves adapting its content and user interface to different languages and cultures. Here are the key principles to follow:</p> <ol> <li>Externalize all strings in resource files.</li> <li>Use neutral identifiers for resources (e.g., \u201cwelcome_message\u201d instead of \u201cenglish_welcome\u201d).</li> <li>Avoid hardcoding text in your code.</li> <li>Consider cultural differences (date formats, measurement units, etc.).</li> <li>Plan for extra space in your interface for longer translations.</li> <li>Test your application in different languages and configurations.</li> </ol>"},{"location":"2.%20Android/10-localisation/#simple-example-with-strings-in-english-and-french","title":"Simple Example with Strings in English and French","text":""},{"location":"2.%20Android/10-localisation/#step-1-configure-language-resources","title":"Step 1: Configure Language Resources","text":"<p>1- In the <code>res</code> folder, create a <code>values-fr</code> folder for French resources.</p> <p>2- In <code>res/values/strings.xml</code> (default English):</p> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;My App&lt;/string&gt;\n    &lt;string name=\"welcome_message\"&gt;Welcome to My App!&lt;/string&gt;\n    &lt;string name=\"language_selection\"&gt;Select a language&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <p>3- In <code>res/values-fr/strings.xml</code>:</p> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;Mon Application&lt;/string&gt;\n    &lt;string name=\"welcome_message\"&gt;Bienvenue dans Mon Application !&lt;/string&gt;\n    &lt;string name=\"language_selection\"&gt;S\u00e9lectionnez une langue&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"2.%20Android/10-localisation/#step-2-use-localized-strings-in-jetpack-compose","title":"Step 2: Use Localized Strings in Jetpack Compose","text":"<pre><code>@Composable\nfun WelcomeScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = stringResource(R.string.welcome_message),\n            style = MaterialTheme.typography.h4\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            text = stringResource(R.string.language_selection),\n            style = MaterialTheme.typography.body1\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/10-localisation/#date-formatting","title":"Date Formatting","text":"<p>To format dates according to the user\u2019s locale, use the <code>DateTimeFormatter</code> class with <code>ofLocalizedDate()</code>:</p> <pre><code>import java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.FormatStyle\n\n@Composable\nfun DisplayLocalizedDate() {\n    val currentDate = LocalDate.now()\n    val dateFormatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)\n    val formattedDate = remember(currentDate) {\n        currentDate.format(dateFormatter)\n    }\n\n    Text(\n        text = formattedDate,\n        style = MaterialTheme.typography.body1\n    )\n}\n</code></pre> <p>This code will display the current date in the appropriate long format for the user\u2019s locale. For example:</p> <ul> <li>In English (US): \u201cSeptember 18, 2024\u201d</li> <li>In French: \u201c18 septembre 2024\u201d</li> </ul> <p>By following these steps, your Jetpack Compose application will be properly localized in English and French, with the ability to easily add other languages in the future.</p> <p>Citations:</p> <ul> <li>https://www.translized.com/blog/android-localization-with-jetpack-compose\u2014a-comprehensive-guide</li> <li>https://phrase.com/blog/posts/localized-date-time-android/</li> <li>https://www.youtube.com/watch?v=VdwDawvfH98</li> <li>https://phrase.com/blog/posts/internationalizing-jetpack-compose-android-apps/</li> <li>https://www.adamormsby.com/posts/013-android-localization-formatting-dates/</li> </ul>"},{"location":"2.%20Android/10-localisation/#complete-example","title":"Complete Example","text":"<p>Here\u2019s a complete example of a simple application using Jetpack Compose with localization, without buttons to change the language. This application will display a localized welcome message and the current date formatted according to the device\u2019s locale.</p> <pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.FormatStyle\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApp()\n        }\n    }\n}\n\n@Composable\nfun MyApp() {\n    MaterialTheme {\n        Surface(\n            modifier = Modifier.fillMaxSize(),\n            color = MaterialTheme.colors.background\n        ) {\n            LocalizedContent()\n        }\n    }\n}\n\n@Composable\nfun LocalizedContent() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = stringResource(R.string.welcome_message),\n            style = MaterialTheme.typography.h4\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        DisplayLocalizedDate()\n    }\n}\n\n@Composable\nfun DisplayLocalizedDate() {\n    val currentDate = remember { LocalDate.now() }\n    val dateFormatter = remember { DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG) }\n    val formattedDate = remember(currentDate) {\n        currentDate.format(dateFormatter)\n    }\n\n    Text(\n        text = formattedDate,\n        style = MaterialTheme.typography.body1\n    )\n}\n</code></pre> <p>For this application to work correctly, you also need to configure the following resource files:</p> <ul> <li>In <code>res/values/strings.xml</code> (default English):</li> </ul> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;My Localized App&lt;/string&gt;\n    &lt;string name=\"welcome_message\"&gt;Welcome to My Localized App!&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <ul> <li>In <code>res/values-fr/strings.xml</code> (for French):</li> </ul> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;Mon Application Localis\u00e9e&lt;/string&gt;\n    &lt;string name=\"welcome_message\"&gt;Bienvenue dans Mon Application Localis\u00e9e !&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <ul> <li>Make sure you have the necessary dependencies in your <code>build.gradle</code> (Module: app) file:</li> </ul> <pre><code>dependencies {\n    implementation \"androidx.compose.ui:ui:1.5.0\"\n    implementation \"androidx.compose.material:material:1.5.0\"\n    implementation \"androidx.compose.ui:ui-tooling-preview:1.5.0\"\n    implementation \"androidx.activity:activity-compose:1.7.2\"\n}\n</code></pre> <p>This simple application displays:</p> <ol> <li>A localized welcome message</li> <li>The current date formatted according to the device\u2019s locale</li> </ol> <p>The application will automatically use the appropriate resources based on the language configured on the user\u2019s device. If the device is set to French, it will use the strings from the <code>values-fr/strings.xml</code> file. For any other language, it will use the default strings from the <code>values/strings.xml</code> file.</p> <p>To test different languages, you can change the language of your device or emulator in the system settings. The application will automatically adapt to the new language without requiring a restart.</p>"},{"location":"2.%20Android/11-json/","title":"11. Reading and Writing JSON Files","text":""},{"location":"2.%20Android/11-json/#saving-and-reading-json-data-in-kotlin","title":"Saving and Reading JSON Data in Kotlin","text":""},{"location":"2.%20Android/11-json/#step-1-preparation","title":"Step 1: Preparation","text":"<p>For example, the <code>Player</code> class is defined as follows:</p> <pre><code>data class Player(\n    val id: Int,\n    val number: Int,\n    val name: String,\n    val image_resource: Int = R.drawable.nhl_logo\n)\n</code></pre> <p>We\u2019ll use the <code>Gson</code> library for JSON serialization and deserialization. Add the following dependency in the module\u2019s <code>build.gradle</code> file directly in the dependencies section of the <code>app/build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.google.code.gson:gson:2.10.1\")\n</code></pre> <p>Another option offered by Android Studio is to convert this dependency to the Version Catalogs format. You can accept this format change. The line above will be replaced by:</p> <pre><code>implementation(libs.gson)\n</code></pre> <p>And two lines will be added to <code>gradle/libs.versions.toml</code> for <code>gson</code>:</p> <pre><code>[versions]\ngson = \"2.10.1\"\n\n[libraries]\ngson = { module = \"com.google.code.gson:gson\", version.ref = \"gson\" }\n</code></pre>"},{"location":"2.%20Android/11-json/#step-2-saving-data-to-a-json-file","title":"Step 2: Saving Data to a JSON File","text":"<p>To save a list of <code>Player</code> to a JSON file, we\u2019ll create an extension function:</p> <pre><code>import com.google.gson.Gson\nimport java.io.File\n\nfun List&lt;Player&gt;.saveToFile(filename: String) {\n    val jsonString = Gson().toJson(this)\n    File(filename).writeText(jsonString)\n}\n</code></pre> <p>This function converts the list of <code>Player</code> to a JSON string, then writes it to a file.</p>"},{"location":"2.%20Android/11-json/#step-3-reading-data-from-a-json-file","title":"Step 3: Reading Data from a JSON File","text":"<p>To read the list of <code>Player</code> from a JSON file, we\u2019ll create another function:</p> <pre><code>import com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.File\n\nfun readPlayersFromFile(filename: String): List&lt;Player&gt; {\n    val jsonString = File(filename).readText()\n    val playerListType = object : TypeToken&lt;List&lt;Player&gt;&gt;() {}.type\n    return Gson().fromJson(jsonString, playerListType)\n}\n</code></pre> <p>This function reads the content of the JSON file, then converts it to a list of <code>Player</code>.</p>"},{"location":"2.%20Android/11-json/#step-4-using-the-functions","title":"Step 4: Using the Functions","text":"<p>Here\u2019s an example of using these functions:</p> <pre><code>fun main() {\n    // Creating a list of players\n    val players = listOf(\n        Player(1, 99, \"Wayne Gretzky\"),\n        Player(2, 87, \"Sidney Crosby\"),\n        Player(3, 9, \"Bobby Orr\")\n    )\n\n    // Saving players to a JSON file\n    players.saveToFile(\"players.json\")\n    println(\"Players saved to players.json\")\n\n    // Reading players from the JSON file\n    val loadedPlayers = readPlayersFromFile(\"players.json\")\n    println(\"Players loaded from players.json:\")\n    loadedPlayers.forEach { println(it) }\n}\n</code></pre>"},{"location":"2.%20Android/11-json/#important-points","title":"Important Points","text":"<ol> <li>Serialization: This is the process of converting objects to JSON format.</li> <li>Deserialization: This is the reverse process, converting JSON to Kotlin objects.</li> <li>File Management: Kotlin offers simple methods for reading and writing files.</li> <li>Gson Library: It greatly simplifies working with JSON in Kotlin.</li> <li>Data Class: Using <code>data class</code> for Player facilitates serialization/deserialization.</li> </ol>"},{"location":"2.%20Android/11-json/#file-management-in-android","title":"File Management in Android","text":""},{"location":"2.%20Android/11-json/#overwriting-and-creating-files","title":"Overwriting and Creating Files","text":"<ol> <li> <p>Overwriting Existing File    When using the <code>File(filename).writeText(jsonString)</code> method, if the specified file already exists, its content will    be effectively overwritten. This operation completely replaces the previous content with new data.</p> </li> <li> <p>Creating a New File    If the specified file doesn\u2019t exist, Android will automatically create it before writing the data. This means you    don\u2019t need to check for the file\u2019s existence or create it manually.</p> </li> </ol>"},{"location":"2.%20Android/11-json/#file-location","title":"File Location","text":"<p>The file location depends on the path you specify in the <code>filename</code> parameter. In the context of an Android application, it\u2019s crucial to understand the different storage options:</p> <ol> <li> <p>Internal Storage</p> <ul> <li>By default, if you use a relative path, the file will be created in your application\u2019s private directory.</li> <li>Typical path: <code>/data/data/[your_app_package_name]/files/</code></li> <li>This directory is private and accessible only by your application.</li> </ul> </li> <li> <p>External Storage</p> <ul> <li>To write to external storage (like SD card), you must request appropriate permissions and use an absolute path (   see another section).</li> <li>Example: <code>Environment.getExternalStorageDirectory().absolutePath + \"/MyFolder/myfile.json\"</code></li> </ul> </li> </ol>"},{"location":"2.%20Android/11-json/#best-practices-for-android-applications","title":"Best Practices for Android Applications","text":""},{"location":"2.%20Android/11-json/#using-application-context","title":"Using Application Context","text":"<p>For better file management in an Android application, it\u2019s recommended to use the application context to get the appropriate directory:</p> <pre><code>fun Context.saveToFile(players: List&lt;Player&gt;, filename: String) {\n    val file = File(this.filesDir, filename)\n    file.writeText(Gson().toJson(players))\n}\n\nfun Context.readPlayersFromFile(filename: String): List&lt;Player&gt; {\n    val file = File(this.filesDir, filename)\n    val jsonString = file.readText()\n    val playerListType = object : TypeToken&lt;List&lt;Player&gt;&gt;() {}.type\n    return Gson().fromJson(jsonString, playerListType)\n}\n</code></pre>"},{"location":"2.%20Android/11-json/#error-handling","title":"Error Handling","text":"<p>It\u2019s important to add error handling to handle cases where writing or reading might fail:</p> <pre><code>fun Context.saveToFile(players: List&lt;Player&gt;, filename: String) {\n    try {\n        val file = File(this.filesDir, filename)\n        file.writeText(Gson().toJson(players))\n    } catch (e: Exception) {\n        Log.e(\"FileIO\", \"Error writing file\", e)\n    }\n}\n</code></pre>"},{"location":"2.%20Android/11-json/#checking-file-existence","title":"Checking File Existence","text":"<p>Before reading a file, it\u2019s wise to check its existence:</p> <pre><code>fun Context.readPlayersFromFile(filename: String): List&lt;Player&gt;? {\n    val file = File(this.filesDir, filename)\n    return if (file.exists()) {\n        try {\n            val jsonString = file.readText()\n            val playerListType = object : TypeToken&lt;List&lt;Player&gt;&gt;() {}.type\n            Gson().fromJson(jsonString, playerListType)\n        } catch (e: Exception) {\n            Log.e(\"FileIO\", \"Error reading file\", e)\n            emptyList()\n        }\n    } else {\n        emptyList()\n    }\n}\n</code></pre>"},{"location":"2.%20Android/12-cycle-de-vie/","title":"12. Lifecycle and Architecture","text":""},{"location":"2.%20Android/12-cycle-de-vie/#general-android-application-lifecycle","title":"General Android Application Lifecycle","text":""},{"location":"2.%20Android/12-cycle-de-vie/#fundamental-concepts","title":"Fundamental Concepts","text":"<p>An Android application consists of different components, each with its own lifecycle, but the main element is the * Activity*. An activity represents a screen of the application with which the user can interact.</p> <p>The lifecycle of an activity extends from its creation to its destruction, when the system reclaims its resources. Understanding this lifecycle is essential for:</p> <ul> <li>Avoiding crashes during interruptions (phone calls, app switching)</li> <li>Optimizing system resource usage</li> <li>Preserving application data and state</li> <li>Properly handling configuration changes (screen rotation)</li> </ul>"},{"location":"2.%20Android/12-cycle-de-vie/#main-activity-states","title":"Main Activity States","text":"<p>An activity can be in four main states:</p> <ul> <li>Active/Resumed: The activity is in the foreground and interactive</li> <li>Paused: Visible but has lost focus</li> <li>Stopped: Not visible but kept in memory</li> <li>Destroyed: The activity is terminated</li> </ul> <p>Lifecycle</p>"},{"location":"2.%20Android/12-cycle-de-vie/#lifecycle-methods","title":"Lifecycle Methods","text":"<p>The main methods called during state transitions are:</p> <ol> <li><code>onCreate()</code>: Activity initialization</li> <li><code>onStart()</code>: Activity becomes visible</li> <li><code>onResume()</code>: Activity becomes interactive</li> <li><code>onPause()</code>: Activity loses focus</li> <li><code>onStop()</code>: Activity is no longer visible</li> <li><code>onDestroy()</code>: Activity is destroyed</li> </ol>"},{"location":"2.%20Android/12-cycle-de-vie/#jetpack-compose-specificities","title":"Jetpack Compose Specificities","text":""},{"location":"2.%20Android/12-cycle-de-vie/#declarative-approach","title":"Declarative Approach","text":"<p>Jetpack Compose uses a different approach from the traditional lifecycle. Instead of directly managing state changes through callback methods, Compose uses a declarative paradigm.</p>"},{"location":"2.%20Android/12-cycle-de-vie/#state-management","title":"State Management","text":"<p>In Compose, the lifecycle is closely tied to state management:</p> <ul> <li>Composables are either stateless or stateful</li> <li>State is managed through <code>State&lt;T&gt;</code> objects and the <code>remember{}</code> function</li> <li>Recomposition occurs automatically when state changes</li> </ul>"},{"location":"2.%20Android/12-cycle-de-vie/#effects-and-lifecycle","title":"Effects and Lifecycle","text":"<p>Compose introduces specific effects to manage lifecycle-related operations:</p> <pre><code>@Composable\nfun MyComposable() {\n    // Effect executed at each recomposition\n    LaunchedEffect(key1) {\n        // Code to execute\n    }\n\n    // Effect executed only at first composition\n    DisposableEffect(key1) {\n        onDispose {\n            // Resource cleanup\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/12-cycle-de-vie/#best-practices","title":"Best Practices","text":"<p>For an efficient Compose application:</p> <ul> <li>Favor stateless components</li> <li>Hoist state to the appropriate level</li> <li>Use effects for operations with side effects</li> <li>Avoid side effects in composables</li> <li>Properly manage recomposition to optimize performance</li> </ul> <p>By understanding these concepts, you can develop robust Android applications that properly handle their lifecycle, whether using the traditional approach or Jetpack Compose.</p> <p>Citations:</p> <ul> <li>https://developer.android.com/codelabs/basic-android-kotlin-compose-activity-lifecycle?hl=fr</li> <li>https://appmaster.io/fr/blog/jetpack-compose-un-guide-du-debutant</li> <li>https://www.weblineindia.com/fr/blog/android-app-development-lifecycle.html</li> <li>https://appmaster.io/fr/blog/kotlin-avec-jetpack-compose-les-meilleures-pratiques</li> <li>http://www.iro.umontreal.ca/~dift1155/cours/ift1155/communs/Cours/2P/C02_CycledeVie_2P.pdf</li> <li>https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=fr</li> <li>https://developer.android.com/codelabs/basic-android-kotlin-training-activity-lifecycle?hl=fr</li> <li>https://developer.android.com/develop/ui/compose/state?hl=fr</li> <li>https://www.yeeply.com/fr/blog/developpement-applications-mobiles/cycle-de-vie-developpement-logiciels-mobiles/</li> <li>https://developer.android.com/guide/components/activities/activity-lifecycle?hl=fr</li> <li>https://openclassrooms.com/fr/courses/8150246-developpez-votre-premiere-application-android/8256687-apprehendez-le-cycle-de-vie-d-une-application</li> <li>https://www.editions-eni.fr/livre/jetpack-compose-developpez-des-interfaces-accessibles-et-modernes-pour-android-9782409039669/gestion-des-etats-et-des-effets</li> <li>https://www.lirmm.fr/~fmichel/ens/android/cours/Android_lifecycle.pdf</li> <li>https://mathias-seguy.developpez.com/tutoriels/android/comprendre-cyclevie-activite/</li> </ul>"},{"location":"2.%20Android/13-architecture/","title":"13. Architecture","text":""},{"location":"2.%20Android/13-architecture/#layered-architecture","title":"Layered Architecture","text":"<p>A modern Android application with Jetpack Compose should follow a distinct layered architecture:</p>"},{"location":"2.%20Android/13-architecture/#ui-layer-presentation","title":"UI Layer (Presentation)","text":"<p>The UI layer is responsible for displaying data and handling user interactions. With Jetpack Compose, it includes:</p> <p>Main Components:</p> <ul> <li>UI Composables</li> <li>ViewModels</li> <li>UI State</li> <li>UI Events</li> </ul> <pre><code>@Composable\nfun MyScreen(\n    viewModel: MyViewModel = viewModel()\n) {\n    val uiState by viewModel.uiState.collectAsState()\n\n    Column {\n        // UI elements\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#domain-layer-optional","title":"Domain Layer (Optional)","text":"<p>This intermediate layer contains the business logic and bridges UI and Data:</p> <ul> <li>Use cases</li> <li>Domain models</li> <li>Business logic</li> </ul> <pre><code>class GetUserUseCase(\n    private val userRepository: UserRepository\n) {\n    suspend operator fun invoke(userId: String): User {\n        return userRepository.getUser(userId)\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#data-layer","title":"Data Layer","text":"<p>Manages application data:</p> <ul> <li>Repositories</li> <li>Data sources (API, database)</li> <li>Data models</li> </ul> <pre><code>class UserRepository(\n    private val api: ApiService,\n    private val database: AppDatabase\n) {\n    suspend fun getUser(id: String): User {\n        return database.userDao().getUser(id)\n            ?: api.fetchUser(id).also { user -&gt;\n                database.userDao().insert(user)\n            }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#state-management-with-compose","title":"State Management with Compose","text":""},{"location":"2.%20Android/13-architecture/#ui-state","title":"UI State","text":"<p>UI state is managed through:</p> <ul> <li>State hoisting</li> <li><code>ViewModel</code> with <code>StateFlow</code>/<code>SharedFlow</code></li> <li><code>remember</code>/<code>rememberSaveable</code></li> </ul> <pre><code>class MyViewModel : ViewModel() {\n    private val _uiState = MutableStateFlow(MyUiState())\n    val uiState: StateFlow&lt;MyUiState&gt; = _uiState.asStateFlow()\n\n    fun handleEvent(event: MyUiEvent) {\n        // Update state based on events\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#side-effects","title":"Side Effects","text":"<p>Effects are managed with Compose APIs:</p> <pre><code>@Composable\nfun MyScreen() {\n    LaunchedEffect(key1) {\n        // One-time setup\n    }\n\n    DisposableEffect(key1) {\n        onDispose {\n            // Cleanup\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#navigation","title":"Navigation","text":"<p>Navigation is handled by Navigation Compose:</p> <pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"home\") {\n        composable(\"home\") { HomeScreen() }\n        composable(\"details/{id}\") { backStackEntry -&gt;\n            DetailsScreen(backStackEntry.arguments?.getString(\"id\"))\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#dependency-injection","title":"Dependency Injection","text":"<p>Hilt is recommended for dependency injection:</p> <pre><code>@HiltViewModel\nclass MainViewModel @Inject constructor(\n    private val userRepository: UserRepository\n) : ViewModel()\n</code></pre>"},{"location":"2.%20Android/13-architecture/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Unidirectional Data Flow (UDF)</p> <ul> <li>UI events flow up to the ViewModel</li> <li>State flows down to UI composables</li> </ul> </li> <li> <p>State Hoisting</p> <ul> <li>Separate state from its manipulation</li> <li>Lift state to appropriate level</li> </ul> </li> <li> <p>Single Source of Truth</p> <ul> <li>One source of truth for data</li> <li>Use Flow for reactivity</li> </ul> </li> <li> <p>Stateless Composables</p> <ul> <li>Prefer stateless composables when possible</li> <li>Separate logic from display</li> </ul> </li> <li> <p>Modularization</p> <ul> <li>Divide application into functional modules</li> <li>Use feature modules for better scalability</li> </ul> </li> </ol> <p>This architecture enables creating maintainable, testable, and scalable applications with Jetpack Compose.</p> <p>Citations:</p> <ul> <li>https://www.geeksforgeeks.org/android-architecture/</li> <li>https://www.simform.com/blog/mobile-application-architecture/</li> <li>https://www.intelivita.com/blog/android-architecture-patterns/</li> <li>https://developer.android.com/topic/architecture?hl=en</li> <li>https://w3r.one/fr/blog/mobile/android/architecture-android/comprendre-architecture-android-vie-ensemble-composants-modeles</li> <li>https://www.zucisystems.com/be/blog/limportance-de-larchitecture-mobile-concevoir-des-applications-pour-reussir/</li> <li>https://appmaster.io/fr/blog/kotlin-avec-jetpack-compose-les-meilleures-pratiques</li> <li>https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=fr</li> </ul>"},{"location":"2.%20Android/14-navigation/","title":"14. Navigation in Jetpack Compose","text":"<p>Git Repository</p>"},{"location":"2.%20Android/14-navigation/#example-with-buttons-to-navigate-between-composables","title":"Example with Buttons to Navigate Between Composables","text":""},{"location":"2.%20Android/14-navigation/#initial-setup","title":"Initial Setup","text":"<p>First, add the dependency in the <code>build.gradle</code> file:</p> <pre><code>dependencies {\n    implementation(\"androidx.navigation:navigation-compose:2.8.3\")\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#example-structure","title":"Example Structure","text":"<p>We will create an application with three screens:</p> <ul> <li>Home screen</li> <li>Profile screen</li> <li>Settings screen</li> </ul>"},{"location":"2.%20Android/14-navigation/#route-definition","title":"Route Definition","text":"<pre><code>sealed class Screen(val route: String) {\n    object Home : Screen(\"home\")\n    object Profile : Screen(\"profile\")\n    object Settings : Screen(\"settings\")\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#screen-composable-creation","title":"Screen Composable Creation","text":"<pre><code>@Composable\nfun HomeScreen(navController: NavController) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"Home Screen\")\n        Button(onClick = { navController.navigate(Screen.Profile.route) }) {\n            Text(\"Go to Profile\")\n        }\n        Button(onClick = { navController.navigate(Screen.Settings.route) }) {\n            Text(\"Go to Settings\")\n        }\n    }\n}\n\n@Composable\nfun ProfileScreen(navController: NavController) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"Profile Screen\")\n        Button(onClick = { navController.navigate(Screen.Settings.route) }) {\n            Text(\"Go to Settings\")\n        }\n        Button(onClick = { navController.popBackStack() }) {\n            Text(\"Back\")\n        }\n    }\n}\n\n@Composable\nfun SettingsScreen(navController: NavController) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"Settings Screen\")\n        Button(onClick = { navController.popBackStack() }) {\n            Text(\"Back\")\n        }\n        Button(\n            onClick = {\n                navController.navigate(Screen.Home.route) {\n                    popUpTo(Screen.Home.route) { inclusive = true }\n                }\n            }\n        ) {\n            Text(\"Back to Home\")\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#navigation-configuration","title":"Navigation Configuration","text":"<pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n\n    NavHost(\n        navController = navController,\n        startDestination = Screen.Home.route\n    ) {\n        composable(Screen.Home.route) {\n            HomeScreen(navController)\n        }\n        composable(Screen.Profile.route) {\n            ProfileScreen(navController)\n        }\n        composable(Screen.Settings.route) {\n            SettingsScreen(navController)\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#integration-in-mainactivity","title":"Integration in MainActivity","text":"<pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    AppNavigation()\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#demonstrated-features","title":"Demonstrated Features","text":"<ol> <li>Basic Navigation: Navigation between screens using <code>navigate()</code></li> <li>Back Navigation: Using <code>popBackStack()</code></li> <li>Navigation with Stack Clearing: Using <code>popUpTo</code> to return to home</li> </ol>"},{"location":"2.%20Android/14-navigation/#important-points","title":"Important Points","text":"<ul> <li>The <code>NavController</code> manages the navigation state</li> <li>The <code>NavHost</code> defines the navigation graph</li> <li>Each screen receives the <code>NavController</code> to manage navigation</li> <li><code>popBackStack()</code> allows returning to the previous screen</li> <li><code>popUpTo</code> with <code>inclusive = true</code> allows going back to a destination while including it in the removal</li> </ul> <p>This example shows the basics of navigation in Jetpack Compose while remaining simple and understandable for beginners.</p> <p>Citations: [1] https://proandroiddev.com/android-jetpack-compose-navigation-1cdfc488b891?gi=d31e0323b815 https://saurabhjadhavblogs.com/ultimate-guide-to-jetpack-compose-navigation https://blog.kotlin-academy.com/mastery-navigation-in-jetpack-compose-db00b0a0ef75?gi=007e50484ede https://developer.android.com/develop/ui/compose/navigation https://proandroiddev.com/mastering-navigation-in-jetpack-compose-a-guide-to-using-the-inclusive-attribute-b66916a5f15c?gi=401071494588 https://developer.android.com/codelabs/basic-android-kotlin-compose-navigation https://developer.android.com/develop/ui/compose/navigation?hl=fr https://www.youtube.com/watch?v=AIC_OFQ1r3k</p>"},{"location":"2.%20Android/14-navigation/#example-with-menu-in-application-top-bar","title":"Example with Menu in Application Top Bar","text":""},{"location":"2.%20Android/14-navigation/#application-structure","title":"Application Structure","text":"<pre><code>sealed class Screen(val route: String, val title: String) {\n    object Home : Screen(\"home\", \"Home\")\n    object Profile : Screen(\"profile\", \"Profile\")\n    object Settings : Screen(\"settings\", \"Settings\")\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#navigation-configuration_1","title":"Navigation Configuration","text":"<pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n\n    Scaffold(\n        topBar = {\n            TopAppBarWithMenu(navController)\n        }\n    ) { paddingValues -&gt;\n        NavHost(\n            navController = navController,\n            startDestination = Screen.Home.route,\n            modifier = Modifier.padding(paddingValues)\n        ) {\n            composable(Screen.Home.route) {\n                HomeScreen()\n            }\n            composable(Screen.Profile.route) {\n                ProfileScreen()\n            }\n            composable(Screen.Settings.route) {\n                SettingsScreen()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#topbar-with-menu","title":"TopBar with Menu","text":"<pre><code>@Composable\nfun TopAppBarWithMenu(navController: NavController) {\n    var showMenu by remember { mutableStateOf(false) }\n\n    TopAppBar(\n        title = { Text(\"My Application\") },\n        actions = {\n            IconButton(onClick = { showMenu = !showMenu }) {\n                Icon(Icons.Default.MoreVert, contentDescription = \"Menu\")\n            }\n            DropdownMenu(\n                expanded = showMenu,\n                onDismissRequest = { showMenu = false }\n            ) {\n                DropdownMenuItem(\n                    text = { Text(Screen.Home.title) },\n                    onClick = {\n                        navController.navigate(Screen.Home.route) {\n                            popUpTo(Screen.Home.route) { inclusive = true }\n                        }\n                        showMenu = false\n                    }\n                )\n                DropdownMenuItem(\n                    text = { Text(Screen.Profile.title) },\n                    onClick = {\n                        navController.navigate(Screen.Profile.route)\n                        showMenu = false\n                    }\n                )\n                DropdownMenuItem(\n                    text = { Text(Screen.Settings.title) },\n                    onClick = {\n                        navController.navigate(Screen.Settings.route)\n                        showMenu = false\n                    }\n                )\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#application-screens","title":"Application Screens","text":"<pre><code>@Composable\nfun HomeScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"Home Screen\")\n    }\n}\n\n@Composable\nfun ProfileScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"Profile Screen\")\n    }\n}\n\n@Composable\nfun SettingsScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"Settings Screen\")\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#important-points-to-note","title":"Important Points to Note","text":"<ol> <li> <p>The menu is managed by a <code>showMenu</code> state that controls the <code>DropdownMenu</code> display</p> </li> <li> <p>Each menu item uses <code>navController.navigate()</code> for navigation</p> </li> <li> <p>For the home screen, we use <code>popUpTo</code> with <code>inclusive = true</code> to avoid accumulating screens in the navigation stack</p> </li> <li> <p>The <code>Scaffold</code> automatically manages the necessary padding to prevent content from being hidden behind the TopBar</p> </li> <li> <p>The screens are simple but can be enriched according to the application\u2019s needs</p> </li> </ol> <p>This implementation offers clear and intuitive navigation via a dropdown menu in the application\u2019s top bar.</p> Citations <ul> <li>https://saurabhjadhavblogs.com/ultimate-guide-to-jetpack-compose-navigation</li> <li>https://proandroiddev.com/android-jetpack-compose-navigation-1cdfc488b891?gi=d31e0323b815</li> <li>https://proandroiddev.com/implement-bottom-bar-navigation-in-jetpack-compose-b530b1cd9ee2?gi=5c1ab6e9d027</li> <li>https://proandroiddev.com/mastering-navigation-in-jetpack-compose-a-guide-to-using-the-inclusive-attribute-b66916a5f15c?gi=401071494588</li> <li>https://blog.kotlin-academy.com/mastery-navigation-in-jetpack-compose-db00b0a0ef75?gi=007e50484ede</li> <li>https://developer.android.com/codelabs/basic-android-kotlin-compose-navigation</li> <li>https://www.youtube.com/watch?v=JLICaBEiJS0</li> <li>https://developer.android.com/develop/ui/compose/navigation</li> </ul>"},{"location":"2.%20Android/14-navigation/#example-with-icons-in-bottom-bar","title":"Example with Icons in Bottom Bar","text":""},{"location":"2.%20Android/14-navigation/#application-structure_1","title":"Application Structure","text":"<pre><code>sealed class Screen(\n    val route: String,\n    val title: String,\n    val icon: ImageVector\n) {\n    object Home : Screen(\n        route = \"home\",\n        title = \"Home\",\n        icon = Icons.Default.Home\n    )\n    object Profile : Screen(\n        route = \"profile\",\n        title = \"Profile\",\n        icon = Icons.Default.Person\n    )\n    object Settings : Screen(\n        route = \"settings\",\n        title = \"Settings\",\n        icon = Icons.Default.Settings\n    )\n\n    companion object {\n        val items = listOf(Home, Profile, Settings)\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#navigation-configuration_2","title":"Navigation Configuration","text":"<pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\n    val currentRoute = navBackStackEntry?.destination?.route\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"My Application\") }\n            )\n        },\n        bottomBar = {\n            NavigationBar {\n                Screen.items.forEach { screen -&gt;\n                    NavigationBarItem(\n                        icon = {\n                            Icon(screen.icon, contentDescription = screen.title)\n                        },\n                        label = { Text(screen.title) },\n                        selected = currentRoute == screen.route,\n                        onClick = {\n                            navController.navigate(screen.route) {\n                                // Avoid stacking destinations\n                                popUpTo(navController.graph.startDestinationId) {\n                                    saveState = true\n                                }\n                                // Avoid multiple copies of the same destination\n                                launchSingleTop = true\n                                // Restore state when reselecting\n                                restoreState = true\n                            }\n                        }\n                    )\n                }\n            }\n        }\n    ) { paddingValues -&gt;\n        NavHost(\n            navController = navController,\n            startDestination = Screen.Home.route,\n            modifier = Modifier.padding(paddingValues)\n        ) {\n            composable(Screen.Home.route) {\n                HomeScreen()\n            }\n            composable(Screen.Profile.route) {\n                ProfileScreen()\n            }\n            composable(Screen.Settings.route) {\n                SettingsScreen()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#application-screens_1","title":"Application Screens","text":"<pre><code>@Composable\nfun HomeScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Home,\n            contentDescription = null,\n            modifier = Modifier.size(48.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            \"Home Screen\",\n            style = MaterialTheme.typography.headlineMedium\n        )\n    }\n}\n\n@Composable\nfun ProfileScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Person,\n            contentDescription = null,\n            modifier = Modifier.size(48.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            \"Profile Screen\",\n            style = MaterialTheme.typography.headlineMedium\n        )\n    }\n}\n\n@Composable\nfun SettingsScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Settings,\n            contentDescription = null,\n            modifier = Modifier.size(48.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            \"Settings Screen\",\n            style = MaterialTheme.typography.headlineMedium\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#important-points_1","title":"Important Points","text":"<ol> <li> <p>The <code>NavigationBar</code> uses <code>NavigationBarItem</code> for each destination</p> </li> <li> <p>The <code>selected</code> state is managed by comparing the current route with the item\u2019s route</p> </li> <li> <p>Navigation includes important options:</p> <ul> <li><code>launchSingleTop</code> avoids multiple copies</li> <li><code>popUpTo</code> with <code>saveState</code> properly manages the navigation stack</li> <li><code>restoreState</code> preserves state during reselection</li> </ul> </li> <li> <p>Icons and titles are defined in the sealed <code>Screen</code> class</p> </li> <li> <p><code>currentBackStackEntryAsState()</code> allows tracking the current destination</p> </li> </ol> <p>This implementation offers smooth and intuitive navigation with a bottom navigation bar, commonly used in modern mobile applications. Users can easily switch between different sections of the application by touching the corresponding icons.</p>"},{"location":"2.%20Android/15-intentions/","title":"15. Intents","text":"<p>Git Repository</p>"},{"location":"2.%20Android/15-intentions/#general-structure","title":"General Structure","text":"<p>The code defines a main activity (<code>MainActivity</code>) that contains two Composable components to start other activities.</p>"},{"location":"2.%20Android/15-intentions/#mainactivity","title":"MainActivity","text":"<pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Column {\n                StartOtherActivity()\n                StartOtherActivityWithValue()\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>This is the main activity that inherits from <code>ComponentActivity</code></li> <li>In <code>onCreate</code>, it defines its content with two Composable components in a <code>Column</code></li> </ul>"},{"location":"2.%20Android/15-intentions/#startotheractivity","title":"StartOtherActivity","text":"<pre><code>@Composable\nfun StartOtherActivity() {\n    val context = LocalContext.current\n    Column(\n        modifier = Modifier.fillMaxWidth(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(text = \"Main Screen\")\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = {\n            val intent = Intent(context, SecondActivity::class.java)\n            context.startActivity(intent)\n        }) {\n            Text(\"Go to secondary screen\")\n        }\n    }\n}\n</code></pre> <ul> <li>This component displays a title and a button</li> <li>When the button is clicked, it creates an <code>Intent</code> to start <code>SecondActivity</code></li> <li>The <code>Intent</code> is an Android mechanism to start another activity</li> </ul>"},{"location":"2.%20Android/15-intentions/#startotheractivitywithvalue","title":"StartOtherActivityWithValue","text":"<pre><code>@Composable\nfun StartOtherActivityWithValue() {\n    val context = LocalContext.current\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Button(onClick = {\n            val intent = Intent(context, ThirdActivity::class.java)\n            intent.putExtra(\"buttonValue\", 1)\n            context.startActivity(intent)\n        }) {\n            Text(\"Button 1\")\n        }\n        // Similar second button with value 2\n    }\n}\n</code></pre> <ul> <li>This component displays two buttons</li> <li>Each button starts <code>ThirdActivity</code> passing a different value</li> <li><code>putExtra</code> allows passing data to the next activity</li> </ul>"},{"location":"2.%20Android/15-intentions/#important-points-to-note","title":"Important Points to Note","text":"<ol> <li>The use of <code>LocalContext.current</code> to get the context needed for creating <code>Intent</code></li> <li>The difference between a simple activity change and a change with data passing</li> <li>Layout organization with <code>Column</code>, <code>Spacer</code>, and modifiers for alignment</li> <li>The use of Jetpack Compose components (<code>Button</code>, <code>Text</code>, etc.)</li> </ol> <p>Let me explain this code that represents a secondary activity in the application.</p>"},{"location":"2.%20Android/15-intentions/#secondactivity-structure","title":"SecondActivity Structure","text":""},{"location":"2.%20Android/15-intentions/#the-secondactivity-class","title":"The SecondActivity Class","text":"<pre><code>class SecondActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            SecondScreen(\n                onNavigateBack = {\n                    finish()\n                }\n            )\n        }\n    }\n}\n</code></pre> <ul> <li>This class inherits from <code>ComponentActivity</code>, like the main activity</li> <li>In <code>onCreate</code>, it defines its content with the <code>SecondScreen</code> component</li> <li>The <code>finish()</code> function is passed as a callback to handle returning to the previous screen</li> <li><code>finish()</code> is an Android method that ends the current activity and returns to the previous activity</li> </ul>"},{"location":"2.%20Android/15-intentions/#the-secondscreen-component","title":"The SecondScreen Component","text":"<pre><code>@Composable\nfun SecondScreen(onNavigateBack: () -&gt; Unit) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(text = \"Secondary Screen\")\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = onNavigateBack) {\n            Text(\"Return to main screen\")\n        }\n    }\n}\n</code></pre> <ul> <li>The component takes an <code>onNavigateBack</code> parameter which is a lambda function with no parameters (<code>() -&gt; Unit</code>)</li> <li>The interface is simple with:<ul> <li>A \u201cSecondary Screen\u201d title</li> <li>A 16dp vertical space</li> <li>A button to return to the main screen</li> </ul> </li> <li>The layout uses a <code>Column</code> centered horizontally and vertically</li> <li>The <code>fillMaxSize()</code> modifier makes the column occupy all available space</li> </ul>"},{"location":"2.%20Android/15-intentions/#important-points-to-note_1","title":"Important Points to Note","text":"<ol> <li> <p>Navigation Management</p> <ul> <li>Back navigation is properly handled with <code>finish()</code></li> <li>The callback is passed from activity level to Composable component</li> </ul> </li> <li> <p>Code Structure</p> <ul> <li>Clear separation between activity and user interface</li> <li>Use of reusable components</li> </ul> </li> <li> <p>Best Practices</p> <ul> <li>The <code>SecondScreen</code> component is decoupled from the activity</li> <li>Navigation is handled via callback rather than direct activity reference</li> </ul> </li> <li> <p>User Interface</p> <ul> <li>Simple and centered layout</li> <li>Appropriate use of spacing</li> <li>Clear and intuitive interface</li> </ul> </li> </ol>"},{"location":"2.%20Android/15-intentions/#thirdactivity-structure","title":"ThirdActivity Structure","text":""},{"location":"2.%20Android/15-intentions/#the-thirdactivity-class","title":"The ThirdActivity Class","text":"<pre><code>class ThirdActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val buttonValue = intent.getIntExtra(\"buttonValue\", 0)\n\n        setContent {\n            ThirdScreen(\n                buttonValue = buttonValue,\n                onNavigateBack = {\n                    finish()\n                }\n            )\n        }\n    }\n}\n</code></pre> <ul> <li>This activity retrieves a value passed via the <code>Intent</code> with <code>getIntExtra</code></li> <li>The second parameter <code>0</code> is the default value if no value is found</li> <li>The retrieved value is passed to the <code>ThirdScreen</code> component</li> </ul>"},{"location":"2.%20Android/15-intentions/#the-thirdscreen-component","title":"The ThirdScreen Component","text":"<pre><code>@Composable\nfun ThirdScreen(\n    buttonValue: Int,\n    onNavigateBack: () -&gt; Unit\n) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(text = \"Received value: $buttonValue\")\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = onNavigateBack) {\n            Text(\"Back\")\n        }\n    }\n}\n</code></pre> <ul> <li>The component takes two parameters:<ul> <li><code>buttonValue</code>: the value received from the previous activity</li> <li><code>onNavigateBack</code>: the callback to return to the previous screen</li> </ul> </li> <li>The interface displays the received value and a back button</li> </ul>"},{"location":"2.%20Android/15-intentions/#important-points-to-note_2","title":"Important Points to Note","text":"<ol> <li> <p>Data Passing</p> <ul> <li>Use of <code>getIntExtra</code> to retrieve the passed data</li> <li>Corresponds to the <code>putExtra</code> seen in the first file</li> <li>Important to specify a default value</li> </ul> </li> <li> <p>Communication Cycle</p> <ul> <li>The main activity sends a value</li> <li>The third activity retrieves it</li> <li>The value is displayed on screen</li> </ul> </li> <li> <p>Architecture</p> <ul> <li>Clear separation between logic (data retrieval) and display</li> <li>The Composable component remains pure and reusable</li> </ul> </li> <li> <p>String Template</p> <ul> <li>Use of <code>$buttonValue</code> to insert the value in the text</li> <li>Simple example of string interpolation in Kotlin</li> </ul> </li> </ol> <p>This code complements the first two files well by showing how to:</p> <ul> <li>Receive data from another activity</li> <li>Display this data in the interface</li> <li>Maintain a clean and modular architecture</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/","title":"16. Intents vs. Navigation","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#intent-vs-navigation","title":"<code>Intent</code> vs. <code>Navigation</code>","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#navigation-compose","title":"Navigation Compose","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#advantages","title":"Advantages","text":"<ul> <li>Type safety: Compile-time checks, reducing potential errors</li> <li>Native integration with Jetpack Compose and modern Android architecture</li> <li>More readable and maintainable code, less repetitive code</li> <li>Declarative approach that simplifies navigation</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#disadvantages","title":"Disadvantages","text":"<ul> <li>Limited to basic data types for navigation arguments</li> <li>Requires adding an additional dependency</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#intent-navigation","title":"Intent Navigation","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#advantages_1","title":"Advantages","text":"<ul> <li>Flexibility: Usable in any Android project</li> <li>Familiarity: Extensive documentation and community support</li> <li>Ability to pass Parcelable objects easily</li> <li>Easy integration with other Android components</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#disadvantages_1","title":"Disadvantages","text":"<ul> <li>No compile-time checking: Risk of runtime errors</li> <li>More verbose: Requires more code for navigation management</li> <li>Manual management of lifecycle and state</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#recommendation","title":"Recommendation","text":"<p>For a new application using Jetpack Compose:</p> <ul> <li>Prefer Navigation Compose for internal application navigation</li> <li>Use Intents only for:<ul> <li>Navigation to other applications</li> <li>Cases requiring passing complex objects</li> <li>Integration with traditional Android components</li> </ul> </li> </ul> <p>This hybrid approach allows benefiting from Navigation Compose advantages while maintaining Intent flexibility when needed.</p> <p>Citations:</p> <ul> <li>https://stackoverflow.com/questions/65088035/how-to-navigate-from-a-composable-to-an-activity-in-jetpack-compose</li> <li>https://guides.peruzal.com/v1/android-guides/navigation/intents/</li> <li>https://www.geeksforgeeks.org/start-a-new-activity-using-intent-in-android-using-jetpack-compose/</li> <li>https://developer.android.com/develop/ui/compose/navigation</li> <li>https://developer.android.com/develop/ui/compose/navigation?hl=fr</li> <li>https://betterprogramming.pub/intent-based-compose-navigation-1087634b984a</li> <li>https://blog.kotlin-academy.com/mastery-navigation-in-jetpack-compose-db00b0a0ef75?gi=007e50484ede</li> <li>https://rommansabbir.com/typesafe-navigation-or-traditional-intent-passing</li> </ul>"},{"location":"2.%20Android/17-images-distantes/","title":"17. Displaying Remote Images and Videos","text":"<p>Git Repository</p>"},{"location":"2.%20Android/17-images-distantes/#displaying-an-image-from-a-url-in-jetpack-compose","title":"Displaying an Image from a URL in Jetpack Compose","text":""},{"location":"2.%20Android/17-images-distantes/#prerequisites","title":"Prerequisites","text":"<p>To display an image from a URL, we need to:</p> <ol> <li>Add the Coil dependency in the <code>build.gradle</code> file (app level)</li> <li>Add Internet permission in <code>AndroidManifest.xml</code></li> </ol> <pre><code>// build.gradle\ndependencies {\n    implementation(\"io.coil-kt:coil-compose:2.5.0\")\n}\n</code></pre> <pre><code>&lt;!-- AndroidManifest.xml --&gt;\n&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#basic-composable","title":"Basic Composable","text":"<p>Here\u2019s a simple usage example:</p> <pre><code>import androidx.compose.foundation.layout.size\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\n\n@Composable\nfun RemoteImage() {\n    AsyncImage(\n        model = \"https://example.com/image.jpg\",\n        contentDescription = \"Image description\",\n        modifier = Modifier.size(200.dp)\n    )\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#more-complete-version-with-loading-management","title":"More Complete Version with Loading Management","text":"<pre><code>import androidx.compose.foundation.layout.*\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.unit.dp\nimport coil.compose.SubcomposeAsyncImage\n\n@Composable\nfun AdvancedRemoteImage() {\n    SubcomposeAsyncImage(\n        model = \"https://example.com/image.jpg\",\n        contentDescription = \"Image description\",\n        modifier = Modifier.size(200.dp),\n        contentScale = ContentScale.Fit,\n        loading = {\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                CircularProgressIndicator()\n            }\n        },\n        error = {\n            // You can customize the error display\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\"Loading error\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#important-points","title":"Important Points","text":"<ol> <li> <p>Coil is an image loading library for Android, optimized for Kotlin and Jetpack Compose.</p> </li> <li> <p>Two main composables are available:</p> <ul> <li><code>AsyncImage</code>: simple version for basic cases</li> <li><code>SubcomposeAsyncImage</code>: advanced version allowing management of loading states</li> </ul> </li> <li> <p>Main parameters:</p> <ul> <li><code>model</code>: the image URL</li> <li><code>contentDescription</code>: description for accessibility</li> <li><code>modifier</code>: to customize size and appearance</li> <li><code>contentScale</code>: to define how the image should adapt to its container</li> </ul> </li> <li> <p>For testing, here are some royalty-free image URLs:</p> </li> </ol> <pre><code>\"https://picsum.photos/200\"  // Random 200x200 image\n\"https://via.placeholder.com/200\"  // 200x200 placeholder image\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#complete-usage-example","title":"Complete Usage Example","text":"<pre><code>@Composable\nfun ExampleImageScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.spacedBy(16.dp)\n    ) {\n        // Simple image\n        AsyncImage(\n            model = \"https://picsum.photos/200\",\n            contentDescription = \"Random image\",\n            modifier = Modifier.size(200.dp)\n        )\n\n        // Image with loading management\n        SubcomposeAsyncImage(\n            model = \"https://picsum.photos/300\",\n            contentDescription = \"Random image with loading\",\n            modifier = Modifier.size(300.dp),\n            loading = { CircularProgressIndicator() }\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#video-integration-in-jetpack-compose","title":"Video Integration in Jetpack Compose","text":""},{"location":"2.%20Android/17-images-distantes/#playing-mp4-videos-with-exoplayer","title":"Playing MP4 Videos with ExoPlayer","text":"<p>To play MP4 videos, we\u2019ll use ExoPlayer, which is recommended by Google for media playback on Android.</p> <p>First, add the dependencies in <code>build.gradle</code>:</p> <pre><code>dependencies {\n    implementation(\"androidx.media3:media3-exoplayer:1.2.0\")\n    implementation(\"androidx.media3:media3-ui:1.2.0\")\n}\n</code></pre> <p>Then, create the video composable:</p> <pre><code>import androidx.compose.runtime.*\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.media3.common.MediaItem\nimport androidx.media3.common.Player\nimport androidx.media3.exoplayer.ExoPlayer\nimport androidx.media3.ui.PlayerView\n\n@Composable\nfun VideoPlayer(\n    videoUrl: String,\n    modifier: Modifier = Modifier\n) {\n    val context = LocalContext.current\n\n    // Creating ExoPlayer\n    val exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            setMediaItem(MediaItem.fromUri(videoUrl))\n            prepare()\n        }\n    }\n\n    // Lifecycle management\n    DisposableEffect(Unit) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    // Player user interface\n    AndroidView(\n        factory = { context -&gt;\n            PlayerView(context).apply {\n                player = exoPlayer\n            }\n        },\n        modifier = modifier\n    )\n}\n</code></pre> <p>Usage:</p> <pre><code>@Composable\nfun VideoPlayerScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp)\n    ) {\n        // Example with MP4 video\n        VideoPlayer(\n            videoUrl = \"https://example.com/video.mp4\",\n            modifier = Modifier\n                .fillMaxWidth()\n                .aspectRatio(16f / 9f)\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#complete-version-with-error-and-loading-management","title":"Complete Version with Error and Loading Management","text":"<pre><code>@Composable\nfun AdvancedVideoPlayer(\n    videoUrl: String,\n    modifier: Modifier = Modifier\n) {\n    var isLoading by remember { mutableStateOf(true) }\n    var hasError by remember { mutableStateOf(false) }\n    val context = LocalContext.current\n\n    val exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            addListener(object : Player.Listener {\n                override fun onPlaybackStateChanged(state: Int) {\n                    when (state) {\n                        Player.STATE_READY -&gt; isLoading = false\n                        Player.STATE_ENDED -&gt; { /* Handle end */\n                        }\n                        Player.STATE_BUFFERING -&gt; isLoading = true\n                        Player.STATE_IDLE -&gt; { /* Initial state */\n                        }\n                    }\n                }\n\n                override fun onPlayerError(error: PlaybackException) {\n                    hasError = true\n                    isLoading = false\n                }\n            })\n\n            setMediaItem(MediaItem.fromUri(videoUrl))\n            prepare()\n        }\n    }\n\n    DisposableEffect(Unit) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    Box(modifier = modifier) {\n        AndroidView(\n            factory = { context -&gt;\n                PlayerView(context).apply {\n                    player = exoPlayer\n                }\n            },\n            modifier = Modifier.matchParentSize()\n        )\n\n        if (isLoading) {\n            CircularProgressIndicator(\n                modifier = Modifier.align(Alignment.Center)\n            )\n        }\n\n        if (hasError) {\n            Text(\n                text = \"Video playback error\",\n                modifier = Modifier.align(Alignment.Center),\n                color = Color.Red\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#important-points_1","title":"Important Points","text":"<ol> <li> <p>Add Internet permission in <code>AndroidManifest.xml</code>:    <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n</code></pre></p> </li> <li> <p>For ExoPlayer:</p> <ul> <li>It\u2019s Google\u2019s recommended solution</li> <li>Supports many video formats</li> <li>Handles caching automatically</li> <li>Offers advanced playback controls</li> </ul> </li> <li> <p>Performance Considerations:</p> <ul> <li>Videos consume a lot of resources</li> <li>Important to properly manage lifecycle</li> <li>Plan for cache and bandwidth management</li> </ul> </li> </ol>"},{"location":"2.%20Android/18-async/","title":"18. Async and await","text":"<p>Asynchronous programming in Kotlin provides powerful tools to handle operations that might take time to complete without blocking the main thread. This approach is crucial for creating responsive applications, especially on platforms like Android.</p>"},{"location":"2.%20Android/18-async/#asynchronous-programming-in-pure-kotlin","title":"Asynchronous Programming in Pure Kotlin","text":"<p>Kotlin\u2019s approach to asynchronous programming is centered around coroutines, which are lightweight threads that can be suspended without blocking the underlying thread.</p>"},{"location":"2.%20Android/18-async/#coroutines-basics","title":"Coroutines Basics","text":"<p>At the core of Kotlin\u2019s asynchronous programming are suspending functions and the <code>kotlinx.coroutines</code> library. Here\u2019s a simple example:</p> <pre><code>import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    println(\"Start\")\n\n    val deferred = async {\n        delay(1000) // Simulates a long-running operation\n        42 // Return value\n    }\n\n    println(\"The computed value is: ${deferred.await()}\")\n    println(\"End\")\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>runBlocking</code> creates a coroutine scope that bridges regular and coroutine code</li> <li><code>async</code> starts a coroutine that returns a <code>Deferred</code> object</li> <li><code>await()</code> suspends the coroutine until the result is available[5]</li> </ul>"},{"location":"2.%20Android/18-async/#understanding-asyncawait","title":"Understanding Async/Await","text":"<p>The async/await pattern is fundamental in Kotlin coroutines:</p> <pre><code>import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    val deferredValue: Deferred = async {\n        delay(1000) // Simulate a long computation\n        42\n    }\n    println(\"The deferred value will be computed soon...\")\n    val result = deferredValue.await() // Wait for the result without blocking\n    println(\"Computed value: $result\")\n}\n</code></pre> <p>This pattern allows you to:</p> <ol> <li>Start asynchronous operations with <code>async</code></li> <li>Continue execution without waiting</li> <li>Get the result with <code>await()</code> when needed[5]</li> </ol>"},{"location":"2.%20Android/18-async/#parallel-decomposition","title":"Parallel Decomposition","text":"<p>One of the powerful features of coroutines is the ability to run multiple operations in parallel:</p> <pre><code>import kotlinx.coroutines.*\n\nsuspend fun fetchMostRecentOrderId(): String {\n    delay(1000) // Simulate network request\n    return \"order123\"\n}\n\nsuspend fun fetchDeliveryCost(orderId: String): Double {\n    delay(500) // Simulate network request\n    return 5.99\n}\n\nsuspend fun fetchStockInformation(orderId: String): String {\n    delay(500) // Simulate network request\n    return \"In stock\"\n}\n\nsuspend fun processOrder() = coroutineScope {\n    val orderId = fetchMostRecentOrderId()\n\n    val deliveryCostDeferred = async { fetchDeliveryCost(orderId) }\n    val stockInfoDeferred = async { fetchStockInformation(orderId) }\n\n    // Wait for both results\n    val deliveryCost = deliveryCostDeferred.await()\n    val stockInfo = stockInfoDeferred.await()\n\n    println(\"Order: $orderId, Delivery: $deliveryCost, Stock: $stockInfo\")\n}\n\nfun main() = runBlocking {\n    processOrder()\n}\n</code></pre> <p>This example demonstrates how to:</p> <ul> <li>Fetch data sequentially when needed (orderId)</li> <li>Launch parallel operations with <code>async</code></li> <li>Await results only when required[1]</li> </ul>"},{"location":"2.%20Android/18-async/#asynchronous-programming-in-jetpack-compose","title":"Asynchronous Programming in Jetpack Compose","text":"<p>Jetpack Compose integrates seamlessly with Kotlin coroutines to handle UI updates and asynchronous operations.</p>"},{"location":"2.%20Android/18-async/#launchedeffect-for-side-effects","title":"LaunchedEffect for Side Effects","text":"<pre><code>@Composable\nfun GreetingDisplay() {\n    var greeting by remember { mutableStateOf(\"Loading...\") }\n\n    LaunchedEffect(Unit) {\n        delay(2000) // Simulate network request\n        greeting = \"Hello Android!\"\n    }\n\n    Text(text = greeting)\n}\n</code></pre> <p>This example shows how <code>LaunchedEffect</code> launches a coroutine that follows the composable\u2019s lifecycle, allowing you to perform asynchronous operations and update the UI when complete.[3]</p> Citations <ul> <li>[1] https://hackernoon.com/asynchronous-programming-techniques-with-kotlin-fg9l3wjn</li> <li>[2] https://www.kodeco.com/books/kotlin-coroutines-by-tutorials/v2.0/chapters/5-async-await</li> <li>[3] https://erecinos98.wordpress.com/2023/08/25/demystifying-asynchronous-programming-in-jetpack-compose-and-apk-sharing/</li> <li>[4] https://kodaschool.com/blog/implementing-coroutines-using-jetpack</li> <li>[5] https://www.dhiwise.com/post/mastering-asynchronous-programming-a-deep-dive</li> <li>[6] https://coldfusion-example.blogspot.com/2025/01/efficiently-handle-asynchronous.html</li> <li>[7] https://developer.android.com/kotlin/coroutines</li> <li>[8] https://30dayscoding.com/blog/android-jetpack-compose-coroutines-integration</li> <li>[9] https://developer.android.com/develop/ui/compose/kotlin</li> <li>[10] https://www.youtube.com/watch?v=Wpco6IK1hmY</li> <li>[11] https://proandroiddev.com/kotlin-coroutines-101-async-programming-in-practice-062b359d502b</li> <li>[12] https://www.simplilearn.com/tutorials/kotlin-tutorial/ultimate-guide-on-kotlin-coroutines</li> <li>[13] https://www.youtube.com/watch?v=9vvNUNyFTFM</li> <li>[14] https://outcomeschool.com/blog/kotlin-coroutines</li> <li>[15] https://www.youtube.com/watch?v=RmkI2HH4fqU</li> <li>[16] https://proandroiddev.com/async-image-loading-the-jetpack-compose-way-2686d1ac5a53</li> </ul>"},{"location":"2.%20Android/19-api/","title":"19. Making API calls","text":"<p>Making web API calls in Kotlin can be accomplished using several libraries. Here are examples using both pure Kotlin and within a Jetpack Compose application.</p>"},{"location":"2.%20Android/19-api/#making-api-calls-in-pure-kotlin","title":"Making API Calls in Pure Kotlin","text":"<p>You can use libraries like OkHttp, Ktor Client, or the built-in HttpClient. Here\u2019s an example using OkHttp:</p> <pre><code>// Add dependency: implementation(\"com.squareup.okhttp3:okhttp:4.9.0\") or latest version 4.12.0\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.MediaType.Companion.toMediaType\nimport okhttp3.RequestBody.Companion.toRequestBody\nimport java.net.URL\nimport java.util.concurrent.TimeUnit\n\n// Constants for timeouts\nprivate const val CONNECT_TIMEOUT = 15L\nprivate const val READ_TIMEOUT = 15L\nprivate const val WRITE_TIMEOUT = 15L\n\n// GET request example\nfun performGetRequest(urlString: String, token: String = \"\"): String? {\n    return try {\n        val client = OkHttpClient.Builder()\n            .connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)\n            .writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)\n            .readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)\n            .build()\n\n        val request = Request.Builder()\n            .url(URL(urlString))\n            .apply { if (token.isNotEmpty()) header(\"Authorization\", token) }\n            .get()\n            .build()\n\n        val response = client.newCall(request).execute()\n        response.body?.string()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}\n\n// POST request example\nfun performPostRequest(urlString: String, jsonString: String, token: String = \"\"): String? {\n    return try {\n        val client = OkHttpClient.Builder()\n            .connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)\n            .writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)\n            .readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)\n            .build()\n\n        val mediaType = \"application/json; charset=utf-8\".toMediaType()\n        val body = jsonString.toRequestBody(mediaType)\n\n        val request = Request.Builder()\n            .url(URL(urlString))\n            .apply { if (token.isNotEmpty()) header(\"Authorization\", token) }\n            .post(body)\n            .build()\n\n        val response = client.newCall(request).execute()\n        response.body?.string()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}\n\n// Usage example\nfun main() {\n    // GET request\n    val getResponse = performGetRequest(\"https://jsonplaceholder.typicode.com/posts/1\")\n    println(\"GET Response: $getResponse\")\n\n    // POST request\n    val jsonPayload = \"\"\"{\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}\"\"\"\n    val postResponse = performPostRequest(\"https://jsonplaceholder.typicode.com/posts\", jsonPayload)\n    println(\"POST Response: $postResponse\")\n}\n</code></pre>"},{"location":"2.%20Android/19-api/#output","title":"Output","text":"<pre><code>GET Response: {\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\nPOST Response: {\n  \"title\": \"foo\",\n  \"body\": \"bar\",\n  \"userId\": 1,\n  \"id\": 101\n}\n</code></pre>"},{"location":"2.%20Android/19-api/#making-api-calls-in-a-jetpack-compose-app","title":"Making API Calls in a Jetpack Compose App","text":"<p>For a Compose app, you\u2019ll typically use a ViewModel to handle API calls. Here\u2019s an example using Retrofit with Jetpack Compose:</p> <p>First, set up your project:</p> <ol> <li>Add internet permission in <code>AndroidManifest.xml</code>:</li> </ol> <pre><code>\n</code></pre> <ol> <li>Add dependencies:</li> </ol> <pre><code>// In build.gradle.kts\nimplementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\nimplementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\nimplementation(\"com.google.code.gson:gson:2.10.1\")\n</code></pre> <ol> <li>Create API interface:</li> </ol> <pre><code>// Define your API endpoints\ninterface UserApi {\n    @GET(\"users/{id}\")\n    fun getUserById(@Path(\"id\") id: String): Call\n}\n\n// Data model\ndata class UserModel(\n    val name: String,\n    val email: String,\n    val age: String\n)\n</code></pre> <ol> <li>Create a ViewModel:</li> </ol> <pre><code>class UserViewModel : ViewModel() {\n    private val _userData = MutableStateFlow(null)\n    val userData: StateFlow = _userData.asStateFlow()\n\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow = _isLoading\n\n    private val _error = MutableStateFlow(null)\n    val error: StateFlow = _error\n\n    fun fetchUserData(id: String) {\n        viewModelScope.launch {\n            _isLoading.value = true\n            _error.value = null\n\n            try {\n                val retrofit = Retrofit.Builder()\n                    .baseUrl(\"https://api.example.com/\")\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .build()\n\n                val api = retrofit.create(UserApi::class.java)\n                val call = api.getUserById(id)\n\n                call.enqueue(object : Callback {\n                    override fun onResponse(call: Call, response: Response) {\n                        _isLoading.value = false\n                        if (response.isSuccessful) {\n                            _userData.value = response.body()\n                        } else {\n                            _error.value = \"Error: ${response.code()}\"\n                        }\n                    }\n\n                    override fun onFailure(call: Call, t: Throwable) {\n                        _isLoading.value = false\n                        _error.value = \"Network error: ${t.message}\"\n                    }\n                })\n            } catch (e: Exception) {\n                _isLoading.value = false\n                _error.value = \"Exception: ${e.message}\"\n            }\n        }\n    }\n}\n</code></pre> <ol> <li>Create a Compose UI:</li> </ol> <pre><code>@Composable\nfun UserProfileScreen(viewModel: UserViewModel = viewModel()) {\n    val userData by viewModel.userData.collectAsState()\n    val isLoading by viewModel.isLoading.collectAsState()\n    val error by viewModel.error.collectAsState()\n\n    var userId by remember { mutableStateOf(\"\") }\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        TextField(\n            value = userId,\n            onValueChange = { userId = it },\n            label = { Text(\"User ID\") },\n            modifier = Modifier.fillMaxWidth()\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        Button(\n            onClick = { viewModel.fetchUserData(userId) },\n            enabled = userId.isNotEmpty() &amp;&amp; !isLoading\n        ) {\n            Text(\"Fetch User Data\")\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        when {\n            isLoading -&gt; CircularProgressIndicator()\n            error != null -&gt; Text(\n                text = error ?: \"\",\n                color = Color.Red,\n                modifier = Modifier.padding(16.dp)\n            )\n            userData != null -&gt; UserDataDisplay(userData!!)\n        }\n    }\n}\n\n@Composable\nfun UserDataDisplay(user: UserModel) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(16.dp),\n        elevation = 4.dp\n    ) {\n        Column(modifier = Modifier.padding(16.dp)) {\n            Text(text = \"Name: ${user.name}\", style = MaterialTheme.typography.h6)\n            Text(text = \"Email: ${user.email}\")\n            Text(text = \"Age: ${user.age}\")\n        }\n    }\n}\n</code></pre> <p>This example demonstrates how to make API calls in both pure Kotlin and within a Jetpack Compose application. The Compose example follows modern Android architecture patterns with ViewModel and StateFlow for state management.</p> Citations <ul> <li>[1] https://www.delasign.com/blog/android-studio-kotlin-api-call/</li> <li>[2] https://stackoverflow.com/questions/46177133/http-request-in-android-with-kotlin</li> <li>[3] https://dev.to/ethand91/android-jetpack-compose-api-tutorial-1kh5</li> <li>[4] https://rhythamnegi.com/http-request-with-ktor-client-jetpack-compose-android-project-example</li> <li>[5] https://zetcode.com/kotlin/getpostrequest/</li> <li>[6] https://ktor.io/docs/client-requests.html</li> <li>[7] https://developer.android.com/reference/java/net/HttpURLConnection</li> <li>[8] https://stackoverflow.com/questions/45219379/how-to-make-an-api-request-in-kotlin</li> <li>[9] https://dev.to/gaurav-nandankar/how-to-make-api-calls-in-android-using-kotlin-mpd</li> <li>[10] https://www.mobileinsights.dev/making-get-requests-to-a-rest-api-with-kotlin-and-gson-in-android-9005ef75546e</li> <li>[11] https://developer.android.com/develop/ui/compose/mental-model</li> <li>[12] https://www.youtube.com/watch?v=bLIWWOMVxts</li> <li>[13] https://www.youtube.com/watch?v=LEeCcS5qhAs</li> <li>[14] https://www.youtube.com/watch?v=OHdXOoBwLOs</li> <li>[15] https://ktor.io/docs/server-requests-and-responses.html</li> </ul>"},{"location":"2.%20Android/20-permissions/","title":"20. Requesting permissions","text":""},{"location":"2.%20Android/20-permissions/#android-permission-request-process","title":"Android Permission Request Process","text":""},{"location":"2.%20Android/20-permissions/#1-internet-permissions","title":"1. Internet Permissions","text":"<p>For internet access, declare these normal permissions (automatically granted at install time) in <code>AndroidManifest.xml</code>: <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;  \n&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n</code></pre> No runtime request is needed for these permissions[1][8].  </p>"},{"location":"2.%20Android/20-permissions/#2-storage-permissions","title":"2. Storage Permissions","text":"<p>Storage permissions vary by Android version:  </p> <p>For Android 12 and below: <pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;  \n&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"  \n                 android:maxSdkVersion=\"32\" /&gt;\n</code></pre></p> <p>For Android 13+: Replace broad storage permissions with granular media-type permissions: <pre><code>&lt;uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" /&gt;  \n&lt;uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" /&gt;  \n&lt;uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" /&gt;\n</code></pre></p> <p>Runtime Request (Kotlin Example): <pre><code>private fun requestStoragePermissions() {  \n    val permissions = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {  \n        arrayOf(  \n            Manifest.permission.READ_MEDIA_IMAGES,  \n            Manifest.permission.READ_MEDIA_VIDEO  \n        )  \n    } else {  \n        arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE)  \n    }  \n\n    ActivityCompat.requestPermissions(  \n        this,  \n        permissions,  \n        STORAGE_PERMISSION_REQUEST_CODE  \n    )  \n}  \n</code></pre></p> <p>Handling Denials: If permissions are denied, guide users to app settings via: <pre><code>val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {  \n    data = Uri.fromParts(\"package\", packageName, null)  \n}  \nstartActivity(intent)  \n</code></pre></p>"},{"location":"2.%20Android/20-permissions/#key-notes","title":"Key Notes","text":"<ul> <li>Internet permissions require no runtime checks[8].  </li> <li>Storage permissions need dynamic handling for Android 13+ compatibility[5][7].  </li> <li>Use <code>maxSdkVersion</code> for legacy storage permissions to avoid redundancy[7].  </li> </ul> Citations <ul> <li>[1] https://cknotes.com/dont-forget-to-give-your-android-application-internet-permissions/</li> <li>[2] https://www.youtube.com/watch?v=8nzlIDybGwM</li> <li>[3] https://www.youtube.com/watch?v=7vrCYXj3ma0</li> <li>[4] https://techboltify.com/how-to-enable-storage-permission-in-android/</li> <li>[5] https://sentry.io/answers/storage-permissions-in-android-13/</li> <li>[6] https://www.bluespace.tech/blog/internet-permission/</li> <li>[7] https://sreyas.com/blog/permission-for-storage-in-android-13-or-higher/</li> <li>[8] https://developer.android.com/develop/connectivity/network-ops/connecting</li> <li>[9] https://developer.android.com/training/permissions/declaring</li> <li>[10] https://developer.android.com/reference/android/Manifest.permission</li> <li>[11] https://learn.microsoft.com/en-us/dotnet/api/android.manifest.permission?view=net-android-34.0</li> <li>[12] https://www.reddit.com/r/androidapps/comments/12dixs7/how_can_i_block_an_android_app_from_the_internet/</li> <li>[13] https://developer.android.com/training/permissions/requesting</li> <li>[14] https://developer.android.com/training/data-storage/manage-all-files</li> <li>[15] https://support.google.com/googleplay/answer/9431959</li> <li>[16] https://discussions.unity.com/t/unity-removes-android-permission-internet-in-the-build-apk-after-build-is-completed/924798</li> <li>[17] https://stackoverflow.com/questions/2169294/how-to-add-manifest-permission-to-an-application</li> <li>[18] https://www.youtube.com/watch?v=LIhDB035X4M</li> <li>[19] https://stackoverflow.com/questions/2378607/what-permission-do-i-need-to-access-internet-from-an-android-application</li> <li>[20] https://www.youtube.com/watch?v=j247eYZAaHo</li> <li>[21] https://www.youtube.com/watch?v=55XRw87I5N4</li> <li>[22] https://forum.juce.com/t/android-permission-write-external-storage-should-be-allowed-on-sdk-29/54372</li> </ul>"},{"location":"2.%20Android/20-permissions/#example-reading-and-writing-files-on-external-storage","title":"Example : reading and writing files on external storage","text":"<pre><code>package permissions\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.unit.dp\nimport permissions.ui.theme.PermissionsTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            PermissionsTheme {\n                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;\n                    TextFileSaver(\n                        modifier = Modifier.padding(innerPadding)\n                    )\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun TextFileSaver(modifier: Modifier = Modifier) {\n    var text by remember { mutableStateOf(\"\") }\n    var status by remember { mutableStateOf(\"\") }\n    val context = LocalContext.current\n\n    // For saving files\n    val createFileLauncher = rememberLauncherForActivityResult(\n        ActivityResultContracts.CreateDocument(\"text/plain\")\n    ) { uri -&gt;\n        uri?.let {\n            try {\n                context.contentResolver.openOutputStream(uri)?.use { stream -&gt;\n                    stream.write(text.toByteArray())\n                }\n                status = \"File saved successfully!\"\n            } catch (e: Exception) {\n                status = \"Error saving: ${e.localizedMessage}\"\n            }\n        }\n    }\n\n    // New: For reading files\n    val openFileLauncher = rememberLauncherForActivityResult(\n        ActivityResultContracts.OpenDocument()\n    ) { uri -&gt;\n        uri?.let {\n            try {\n                context.contentResolver.openInputStream(uri)?.use { stream -&gt;\n                    text = stream.bufferedReader().use { it.readText() }\n                    status = \"File loaded successfully!\"\n                }\n            } catch (e: Exception) {\n                status = \"Error reading: ${e.localizedMessage}\"\n            }\n        }\n    }\n\n    Column(\n        modifier = modifier\n            .padding(16.dp)\n            .fillMaxSize(),\n        verticalArrangement = Arrangement.spacedBy(16.dp)\n    ) {\n        TextField(\n            value = text,\n            onValueChange = { text = it },\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(200.dp),\n            placeholder = { Text(\"Enter your text here\") }\n        )\n\n        Row(\n            horizontalArrangement = Arrangement.spacedBy(16.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Button(onClick = {\n                openFileLauncher.launch(arrayOf(\"text/plain\"))\n            }) {\n                Text(\"Load File\")\n            }\n\n            Button(onClick = {\n                createFileLauncher.launch(\"public_file.txt\")\n            }) {\n                Text(\"Save File\")\n            }\n        }\n        Text(status)\n    }\n}\n</code></pre>"}]}